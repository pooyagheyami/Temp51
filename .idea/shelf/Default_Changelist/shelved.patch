Index: Temps/MitemFrm2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n\r\n###########################################################################\r\n## Python code generated with wxFormBuilder (version Oct 26 2018)\r\n## http://www.wxformbuilder.org/\r\n##\r\n## PLEASE DO *NOT* EDIT THIS FILE!\r\n###########################################################################\r\n\r\nimport wx\r\nimport wx.xrc\r\n\r\nfrom AI.OpnFil import *\r\nfrom AI.Analiz import *\r\nfrom AI.Generats import *\r\n\r\nfrom Config.Init import *\r\n\r\nimport Database.MenuSet2 as MS\r\nimport GUI.proman as pro\r\nimport importlib\r\n\r\n###########################################################################\r\n## Class MyPanel2\r\n###########################################################################\r\n\r\nclass MyPanel1 ( wx.Panel ):\r\n\r\n    def __init__( self, parent, Data=[], Button=u'',id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 700,360 ), style = wx.TAB_TRAVERSAL, name = wx.EmptyString ):\r\n        wx.Panel.__init__ ( self, parent, id = id, pos = pos, size = size, style = style, name = name )\r\n\r\n        self.Data = Data\r\n        print(Data)\r\n        self.Button = Button\r\n        self.getMData = MS.GetData(u'Menu2.db', u'')\r\n        self.setMDate = MS.SetData(u'', u'', u'')\r\n\r\n        Vz1 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        self.SP1 = wx.SplitterWindow( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.SP_3D )\r\n        self.SP1.Bind( wx.EVT_IDLE, self.SP1OnIdle )\r\n\r\n        self.P1 = wx.Panel( self.SP1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.BORDER_RAISED|wx.TAB_TRAVERSAL )\r\n        Vzp1 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        Hzp1 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        if Data != []:\r\n            self.barname = self.getMData.gBarN(Data[0])[0][0]\r\n            self.C = self.barname[0]\r\n        else:\r\n            self.barname = u''\r\n            self.C = 'P'\r\n\r\n        self.title = wx.StaticText( self.P1, wx.ID_ANY, u\"Menu Bar: \"+ self.barname, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.title.Wrap( -1 )\r\n\r\n        Hzp1.Add( self.title, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.txt1a = wx.StaticText( self.P1, wx.ID_ANY, u\"ID\", wx.DefaultPosition, wx.Size( -1,-1 ), 0 )\r\n        self.txt1a.Wrap( -1 )\r\n\r\n        Hzp1.Add( self.txt1a, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld0 = wx.TextCtrl( self.P1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0 )\r\n        Hzp1.Add( self.fld0, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.txt1b = wx.StaticText( self.P1, wx.ID_ANY, u\"Access\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt1b.Wrap( -1 )\r\n\r\n        Hzp1.Add( self.txt1b, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld1 = wx.TextCtrl( self.P1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 40,-1 ), 0 )\r\n        Hzp1.Add( self.fld1, 0, wx.ALL, 5 )\r\n\r\n        self.btnsrc = wx.Button( self.P1, wx.ID_ANY, u\"...\", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT )\r\n        Hzp1.Add( self.btnsrc, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp1, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp2 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt2 = wx.StaticText( self.P1, wx.ID_ANY, u\"Label\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt2.Wrap( -1 )\r\n\r\n        Hzp2.Add( self.txt2, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld2 = wx.TextCtrl( self.P1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp2.Add( self.fld2, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp2, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp3 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt3 = wx.StaticText( self.P1, wx.ID_ANY, u\"Icon\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt3.Wrap( -1 )\r\n\r\n        Hzp3.Add( self.txt3, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld3 = wx.FilePickerCtrl( self.P1, wx.ID_ANY, wx.EmptyString, u\"Select a file\", u\"*.png;*.bmp;*.jpg\", wx.DefaultPosition, wx.DefaultSize, wx.FLP_DEFAULT_STYLE|wx.FLP_FILE_MUST_EXIST|wx.FLP_SMALL )\r\n        Hzp3.Add( self.fld3, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp3, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp31 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.icon = wx.StaticBitmap( self.P1, wx.ID_ANY, wx.Bitmap(ICONS_PATH + u\"image.png\", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp31.Add( self.icon, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp31, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        Hzp4 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt4 = wx.StaticText( self.P1, wx.ID_ANY, u\"Shorcut\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt4.Wrap( -1 )\r\n\r\n        Hzp4.Add( self.txt4, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld4 = wx.TextCtrl( self.P1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp4.Add( self.fld4, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp4, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp5 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt5 = wx.StaticText( self.P1, wx.ID_ANY, u\"Help String\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt5.Wrap( -1 )\r\n\r\n        Hzp5.Add( self.txt5, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld5 = wx.TextCtrl( self.P1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp5.Add( self.fld5, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp5, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp6 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt6 = wx.StaticText( self.P1, wx.ID_ANY, u\"Status\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt6.Wrap( -1 )\r\n\r\n        Hzp6.Add( self.txt6, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld6 = wx.TextCtrl( self.P1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp6.Add( self.fld6, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp6, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp7 = wx.WrapSizer( wx.HORIZONTAL, wx.WRAPSIZER_DEFAULT_FLAGS )\r\n\r\n        self.txt7 = wx.StaticText( self.P1, wx.ID_ANY, u\"Type:\", wx.DefaultPosition, wx.Size( 50,-1 ), 0 )\r\n        self.txt7.Wrap( -1 )\r\n\r\n        Hzp7.Add( self.txt7, 0, wx.ALL, 5 )\r\n\r\n        self.rBtn1 = wx.RadioButton( self.P1, wx.ID_ANY, u\"Normal\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp7.Add( self.rBtn1, 0, wx.ALL, 5 )\r\n\r\n        self.rBtn2 = wx.RadioButton( self.P1, wx.ID_ANY, u\"Check\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp7.Add( self.rBtn2, 0, wx.ALL, 5 )\r\n\r\n        self.rBtn3 = wx.RadioButton( self.P1, wx.ID_ANY, u\"Radio\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp7.Add( self.rBtn3, 0, wx.ALL, 5 )\r\n\r\n        self.rBtn4 = wx.RadioButton( self.P1, wx.ID_ANY, u\"SubMenu\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp7.Add( self.rBtn4, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp7, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp71 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.cBox1 = wx.CheckBox( self.P1, wx.ID_ANY, u\"Disable\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp71.Add( self.cBox1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        self.cBox2 = wx.CheckBox( self.P1, wx.ID_ANY, u\"Hidden\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp71.Add( self.cBox2, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp71, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n\r\n        self.P1.SetSizer( Vzp1 )\r\n        self.P1.Layout()\r\n        Vzp1.Fit( self.P1 )\r\n        self.P2 = wx.Panel( self.SP1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.BORDER_RAISED|wx.TAB_TRAVERSAL )\r\n        Vzp2 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        Hzp8 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt8 = wx.StaticText( self.P2, wx.ID_ANY, u\"Menu Bar Direction\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt8.Wrap( -1 )\r\n\r\n        Hzp8.Add( self.txt8, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.MbarDir = wx.TextCtrl( self.P2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.MbarDir.Enable( False )\r\n\r\n        Hzp8.Add( self.MbarDir, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp8, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp9 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt9 = wx.StaticText( self.P2, wx.ID_ANY, u\"Form Name\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt9.Wrap( -1 )\r\n\r\n        Hzp9.Add( self.txt9, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.file1 = wx.FilePickerCtrl( self.P2, wx.ID_ANY, wx.EmptyString, u\"Select a file\", u\"*.py\", wx.DefaultPosition, wx.DefaultSize, wx.FLP_DEFAULT_STYLE|wx.FLP_SMALL )\r\n        Hzp9.Add( self.file1, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp9, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp10 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.btn1 = wx.Button( self.P2, wx.ID_ANY, u\"Preview\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp10.Add( self.btn1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        self.btn2 = wx.Button( self.P2, wx.ID_ANY, u\"Open File\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp10.Add( self.btn2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        self.btn3 = wx.Button( self.P2, wx.ID_ANY, u\"New...\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp10.Add( self.btn3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp10, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp11 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.btn6 = wx.Button( self.P2, wx.ID_ANY, u\"Generate1\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp11.Add( self.btn6, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        self.txt10 = wx.StaticText( self.P2, wx.ID_ANY, u\"Program name\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt10.Wrap( -1 )\r\n\r\n        Hzp11.Add( self.txt10, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.Doprgitm = wx.TextCtrl( self.P2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp11.Add( self.Doprgitm, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp11, 0, wx.EXPAND, 5 )\r\n\r\n        Hzpl = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.line1 = wx.StaticLine( self.P2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.LI_HORIZONTAL )\r\n        Hzpl.Add( self.line1, 1, wx.EXPAND |wx.ALL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzpl, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp12 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt11 = wx.StaticText( self.P2, wx.ID_ANY, u\"Select Database\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt11.Wrap( -1 )\r\n\r\n        Hzp12.Add( self.txt11, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.dbfile = wx.FilePickerCtrl( self.P2, wx.ID_ANY, wx.EmptyString, u\"Select a Database File\", u\"*.db;*.sqlite;*.sqlite3;*.db3\\n\", wx.DefaultPosition, wx.DefaultSize, wx.FLP_DEFAULT_STYLE|wx.FLP_SMALL )\r\n        Hzp12.Add( self.dbfile, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp12, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp13 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt12 = wx.StaticText( self.P2, wx.ID_ANY, u\"Tabels and Fields\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt12.Wrap( -1 )\r\n\r\n        Hzp13.Add( self.txt12, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        Lbox1Choices = [ ]\r\n        self.Lbox1 = wx.ListBox( self.P2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, Lbox1Choices, wx.LB_ALWAYS_SB )\r\n        Hzp13.Add( self.Lbox1, 1, wx.ALL|wx.EXPAND, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp13, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp14 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.btn9 = wx.Button( self.P2, wx.ID_ANY, u\"Generate2\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp14.Add( self.btn9, 0, wx.ALL, 5 )\r\n\r\n        #self.Fildlst = wx.ListCtrl( self.P2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.LC_AUTOARRANGE|wx.LC_NO_HEADER )\r\n        #Hzp14.Add( self.Fildlst, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp14, 1, wx.EXPAND, 5 )\r\n\r\n\r\n        self.P2.SetSizer( Vzp2 )\r\n        self.P2.Layout()\r\n        Vzp2.Fit( self.P2 )\r\n        self.SP1.SplitVertically( self.P1, self.P2, 349 )\r\n        Vz1.Add( self.SP1, 1, wx.EXPAND, 5 )\r\n\r\n        Hz1 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        self.btnA = wx.Button( self, wx.ID_ANY, u\"Apply\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hz1.Add( self.btnA, 0, wx.ALL, 5 )\r\n\r\n        self.btnS = wx.Button( self, wx.ID_ANY, u\"Save \", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hz1.Add( self.btnS, 0, wx.ALL, 5 )\r\n\r\n        self.btnR = wx.Button( self, wx.ID_ANY, u\"Report\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hz1.Add( self.btnR, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vz1.Add( Hz1, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        if self.Button == 'UpDate' or self.Button == 'Delete':\r\n            self.putData(self.Data)\r\n\r\n\r\n        self.SetSizer( Vz1 )\r\n        self.Layout()\r\n\r\n        # Connect Events\r\n        self.btnsrc.Bind( wx.EVT_BUTTON, self.lstid )\r\n        self.fld3.Bind( wx.EVT_FILEPICKER_CHANGED, self.shwicn )\r\n        self.rBtn1.Bind( wx.EVT_RADIOBUTTON, self.typitm )\r\n        self.rBtn2.Bind( wx.EVT_RADIOBUTTON, self.typitm )\r\n        self.rBtn3.Bind( wx.EVT_RADIOBUTTON, self.typitm )\r\n        self.rBtn4.Bind( wx.EVT_RADIOBUTTON, self.typitm )\r\n        self.cBox1.Bind( wx.EVT_CHECKBOX, self.disitm )\r\n        self.cBox2.Bind( wx.EVT_CHECKBOX, self.hiditm )\r\n        self.file1.Bind( wx.EVT_FILEPICKER_CHANGED, self.chngfil )\r\n        self.btn1.Bind( wx.EVT_BUTTON, self.prvw )\r\n        self.btn2.Bind( wx.EVT_BUTTON, self.opnfil )\r\n        self.btn3.Bind( wx.EVT_BUTTON, self.newfil )\r\n        self.btn6.Bind( wx.EVT_BUTTON, self.gnrt1 )\r\n        self.dbfile.Bind( wx.EVT_FILEPICKER_CHANGED, self.Dbfile )\r\n        self.Lbox1.Bind( wx.EVT_LISTBOX, self.tblfld )\r\n        self.Lbox1.Bind( wx.EVT_LISTBOX_DCLICK, self.dblclik )\r\n        self.btn9.Bind( wx.EVT_BUTTON, self.gnrt2 )\r\n        self.btnA.Bind( wx.EVT_BUTTON, self.Aply )\r\n        self.btnS.Bind( wx.EVT_BUTTON, self.Save )\r\n        self.btnR.Bind( wx.EVT_BUTTON, self.Rprt )\r\n\r\n    def __del__( self ):\r\n        pass\r\n\r\n\r\n    # Virtual event handlers, overide them in your derived class\r\n    def putData(self, Data):\r\n        #print(Data)\r\n        self.fld0.SetValue(str(Data[1]))\r\n        if self.Data[11] != None:\r\n            self.fld1.SetValue(Data[11])\r\n        if Data[2] == None:\r\n            self.fld2.SetValue(u'Separator')\r\n        else:\r\n            self.fld2.SetValue(Data[2])\r\n        if Data[8] != None:\r\n            self.fld3.SetPath(ICON16_PATH + Data[8])\r\n        if Data[9] != None:\r\n            self.fld4.SetValue(Data[9])\r\n        if Data[10] != None:\r\n            self.fld5.SetValue(Data[10])\r\n        if Data[7] != None:\r\n            self.fld6.SetValue(Data[7])\r\n        if Data[3] == 'N':\r\n            self.rBtn1.SetValue(True)\r\n        elif Data[3] == 'C':\r\n            self.rBtn2.SetValue(True)\r\n        elif Data[3] == 'R':\r\n            self.rBtn3.SetValue(True)\r\n        elif Data[3] == 'S':\r\n            self.rBtn4.SetValue(True)\r\n        else:\r\n            pass\r\n        if Data[16] != None and Data[16] != 1:\r\n            self.cBox1.SetValue(True)\r\n        if Data[15] != None and Data[15] == '0000':\r\n            self.cBox2.SetValue(True)\r\n\r\n        if Data[18] != '' and Data[18] != None:\r\n            self.Doprgitm.SetValue(Data[18])\r\n        Path = self.getMData.MnuDir(Data[1])[0][0]\r\n        self.MbarDir.SetValue(GUI_PATH + Path.replace('GUI.', ''))\r\n\r\n        if Data[19] != '' and Data[19] != None and Data[19] == '100':\r\n            #    self.file1.SetPath(GUI_PATH+'Temp\\\\'+Data[18]+'.py')\r\n            impy = Anlzfil(GUI_PATH+'Temp\\\\'+Data[18]+'.py')\r\n            impy.parsefil()\r\n        elif Data[19] != None and Data[19] != '100':\r\n            impy = Anlzfil(self.MbarDir.GetValue()+'\\\\'+Data[18]+'.py')\r\n            impy.parsefil()\r\n        else:\r\n            impy = Anlzfil(GUI_PATH+'Temp\\\\'+'buyit.py')\r\n            impy.parsefil()\r\n        #print(impy)\r\n        if impy.getGUIfil() != None:\r\n            ifil = impy.getGUIfil().replace('GUI.API.',GUI_PATH+'API\\\\')\r\n            self.file1.SetPath(ifil+'.py')\r\n\r\n\r\n        self.Update()\r\n\r\n    def lstid( self, event ):\r\n        event.Skip()\r\n\r\n    def shwicn( self, event ):\r\n        self.icon.SetBitmap(wx.Bitmap(self.fld3.GetPath(), wx.BITMAP_TYPE_ANY))\r\n        event.Skip()\r\n\r\n    def typitm( self, event ):\r\n        event.Skip()\r\n\r\n\r\n\r\n\r\n    def disitm( self, event ):\r\n        event.Skip()\r\n\r\n    def hiditm( self, event ):\r\n        event.Skip()\r\n\r\n    def chngfil( self, event ):\r\n        #ifile = self.file1.GetPath()\r\n        #self.Doprgitm.SetValue(ifile.replace(GUI_PATH, '')[:-3].replace('\\\\', '.'))\r\n        event.Skip()\r\n\r\n    def prvw( self, event ):\r\n        a = self.file1.GetPath().replace(GUI_PATH,'GUI.')\r\n        a1 = a.replace('\\\\','.')\r\n        a2 = a1.replace('.py','')\r\n\r\n        try:\r\n            m = importlib.import_module(a2)\r\n            self.Frm = wx.Frame(self, -1, pos=wx.DefaultPosition, size=wx.DefaultSize)\r\n            self.pnl = m.MyPanel1(self.Frm)\r\n            self.Frm.Show()\r\n        except ImportError as error:\r\n            print(error)\r\n        event.Skip()\r\n\r\n    def opnfil( self, event ):\r\n        self.Frm = wx.Frame(self, style=wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)\r\n        self.Pnl = PyPanel(self.Frm, self.file1.GetPath())\r\n        self.Frm.SetSize((700, 560))\r\n        self.Frm.Show()\r\n        event.Skip()\r\n\r\n    def newfil( self, event ):\r\n        self.Frm = wx.Frame(self, style=wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)\r\n        self.Pnl = PyPanel(self.Frm, GUI_PATH+'Temp\\\\untitle.py' )\r\n        self.Frm.SetSize((700, 560))\r\n        self.Frm.Show()\r\n        event.Skip()\r\n\r\n    def gnrt1( self, event ):\r\n        if self.Doprgitm.GetValue() == u'buyit':\r\n            if self.file1.GetPath()[-7:] == u'Pnl0.py':\r\n                wx.MessageBox(u'No Change any thing !')\r\n            else:\r\n                wx.MessageBox(u\"Please change name of program we can not write over this file!\")\r\n        else:\r\n            myfil = self.MbarDir.GetValue()+ '\\\\' + self.Doprgitm.GetValue() + u'.py'\r\n            #print(myfil)\r\n            G = Genrate(myfil)\r\n            G.createFrm(self.file1.GetPath())\r\n            d1 = int(str(self.Data[0])[0]+str(self.Data[1])[-3:]+str(self.Data[0])[-1])\r\n            d2 = self.Doprgitm.GetValue()\r\n            d3 = str(self.Data[0])\r\n            d4 = u'-1'\r\n            d5 = -1\r\n\r\n            self.setMDate.Table = u'handler'\r\n            self.setMDate.Additem(u\"handlerid, prgname, prgdir, paramtr, public\",[d1,d2,d3,d4,d5] )\r\n            wx.MessageBox(u\"successful Generate . Please press [apply] button\")\r\n\r\n        event.Skip()\r\n\r\n    def Dbfile( self, event ):\r\n        event.Skip()\r\n\r\n    def tblfld( self, event ):\r\n        event.Skip()\r\n\r\n    def dblclik( self, event ):\r\n        event.Skip()\r\n\r\n    def gnrt2( self, event ):\r\n        event.Skip()\r\n\r\n    def Aply( self, event ):\r\n        D = self.getfild()\r\n        # print(D)\r\n        # print(self.Data)\r\n        extid = D[0][0] + D[0][-1] + D[7] + self.C + D[2][0] + D[0][1:]\r\n        if self.Doprgitm.GetValue() == '':\r\n            hndid = 10001\r\n        else:\r\n            hndid = self.getHandel(self.Doprgitm.GetValue(), self.file1.GetPath())\r\n        #print(hndid)\r\n        Dsri1 = [self.Data[0], int(D[0]), D[2], D[7], extid, hndid]\r\n        Dsri2 = [extid, D[6], D[3].replace(ICON16_PATH, ''), D[4], D[5], D[1], 1]\r\n        if D[8]:\r\n            dn = 0\r\n        else:\r\n            dn = 1\r\n        if D[9]:\r\n            sh = '0000'\r\n        else:\r\n            sh = 'FFFF'\r\n        Dsri3 = [D[1], 1, sh, dn]\r\n        # print(self.Data)\r\n        # print(Dsri1)\r\n        self.setMDate.Table = u'mitem'\r\n        if self.Button == 'AddNew':\r\n            self.setMDate.Additem(u'mbarid, itemid, itemname, itemtyp, extid, handlerid ', Dsri1)\r\n        elif self.Button == 'UpDate':\r\n            self.setMDate.Upditem(u'itemname = ?, itemtyp = ? , handlerid = ?  where itemid = %d' % self.Data[1],\r\n                                  [D[2], D[7], hndid])\r\n            # print('write it')\r\n        elif self.Button == 'Delete':\r\n            self.setMDate.Delitem(u'mitem.itemid = %d' % self.Data[1])\r\n\r\n        self.setMDate.Table = u'extended'\r\n        if self.Button == 'AddNew':\r\n            self.setMDate.Additem(u'extid, status, icon, shortcut, help, acclvlid, grpid', Dsri2)\r\n        elif self.Button == 'UpDate':\r\n            self.setMDate.Upditem(u'status = ?, icon = ?, shortcut = ? , help = ?  where extid = \"%s\" ' % self.Data[4],\r\n                                  [D[6], D[3].replace(ICON16_PATH, ''), D[4], D[5]])\r\n            # print('write it')\r\n        elif self.Button == 'Delete':\r\n            self.setMDate.Delitem(u'extended.extid = \"%s\"' % self.Data[4])\r\n\r\n        self.setMDate.Table = u'access'\r\n        if self.Button == 'AddNew':\r\n            self.setMDate.Additem(u'acclvlid, userid, acclvl, disenable', Dsri3)\r\n            self.Add2Menu(D)\r\n        elif self.Button == 'UpDate':\r\n            self.setMDate.Upditem(u'acclvl = ? , disenable = ?  where acclvlid = \"%s\" ' % self.Data[11], [sh, dn])\r\n            self.ChngMnu(D)\r\n            # print('write it')\r\n        elif self.Button == 'Delete':\r\n            self.setMDate.Delitem(u'access.acclvlid = \"%s\"' % self.Data[11])\r\n            self.delmenu()\r\n\r\n        wx.MessageBox(u'request apply, you can change or add program later. ')\r\n\r\n        # self.Add2Menu(D)\r\n\r\n        ml = self.GetGrandParent()\r\n        ml.TLCtrl1.DeleteAllItems()\r\n        ml.fillList()\r\n        ml.Refresh()\r\n        # print(dir(self.GetGrandParent()))\r\n        q = self.GetParent()\r\n        q.Close()\r\n        event.Skip()\r\n\r\n    def Add2Menu(self, D):\r\n        mw = self.FindWindowByName('main')\r\n        mb = mw.GetMenuBar()\r\n        lmb = mb.GetMenus()\r\n        for l in lmb:\r\n            if self.barname in l:\r\n                mbc = l[0]\r\n                if D[7] == 'S':\r\n                    mbc.AppendSubMenu(wx.Menu(), D[2], D[5])\r\n                    break\r\n                if D[7] == 'C':\r\n                    mtyp = wx.ITEM_CHECK\r\n                elif D[7] == 'R':\r\n                    mtyp = wx.ITEM_RADIO\r\n                else:\r\n                    mtyp = wx.ITEM_NORMAL\r\n                if D[4] != None or D[4] != '':\r\n                    nm = D[2] + '\\t' + D[4]\r\n                else:\r\n                    nm = D[2]\r\n                mbc.Append(int(D[0]), nm, D[5], mtyp)\r\n                if D[3] != '':\r\n                    mbcitm = mbc.FindItemById(int(D[0]))\r\n                    mbcitm.SetBitmap(wx.Bitmap(D[3], wx.BITMAP_TYPE_ANY))\r\n\r\n    def ChngMnu(self, D):\r\n        mw = self.FindWindowByName('main')\r\n        mb = mw.GetMenuBar()\r\n        lmb = mb.GetMenus()\r\n        for l in lmb:\r\n            if self.barname in l:\r\n                mbc = l[0]\r\n                itmchg = mbc.FindItemById(self.Data[1])\r\n                #print(D)\r\n                #print(dir(itmchg))\r\n                if D[7] == 'S':\r\n                    itmchg.SetSubMenu(wx.Menu(),D[2])\r\n                if D[4] != '':\r\n                    lbl = D[2] + '\\t' + D[4]\r\n                else:\r\n                    lbl = D[2]\r\n                itmchg.SetItemLabel(lbl)\r\n                if D[3] != '':\r\n                    itmchg.SetBitmap(wx.Bitmap(D[3], wx.BITMAP_TYPE_ANY))\r\n                if D[6] != '':\r\n                    itmchg.SetHelp(D[6])\r\n                itmchg.Enable(not D[8])\r\n\r\n    def delmenu(self):\r\n        mw = self.FindWindowByName('main')\r\n        mb = mw.GetMenuBar()\r\n        lmb = mb.GetMenus()\r\n        for l in lmb:\r\n            #print(l)\r\n            if self.barname in l:\r\n                itms = l[0].GetMenuItems()\r\n                #print(dir(itms[-1]))\r\n                for i in itms:\r\n                    print(i.GetId())\r\n                    if i.IsSeparator() and self.Data[2] == u'Separator':\r\n\r\n                        i.Destroy()\r\n\r\n                    elif i.GetId() == self.Data[1]:\r\n                        l[0].RemoveItem(self.Data[1])\r\n                    else:\r\n                        print(i)\r\n\r\n    def getHandel(self, imodel, pathfile):\r\n        print(imodel,pathfile)\r\n        pr = self.getMData.AllHndl()\r\n        #m = imodel.split('.')[1]\r\n        for p in pr:\r\n            if imodel in p:\r\n                return p[0]\r\n        return 10001\r\n\r\n    def Save( self, event ):\r\n        event.Skip()\r\n\r\n    def Rprt( self, event ):\r\n        event.Skip()\r\n\r\n    def SP1OnIdle( self, event ):\r\n        self.SP1.SetSashPosition( 349 )\r\n        self.SP1.Unbind( wx.EVT_IDLE )\r\n\r\n    def getfild(self):\r\n        Data0 = self.fld0.GetValue()\r\n        Data1 = self.fld1.GetValue()\r\n        Data2 = self.fld2.GetValue()\r\n        Data3 = self.fld3.GetPath()\r\n        Data4 = self.fld4.GetValue()\r\n        Data5 = self.fld5.GetValue()\r\n        Data6 = self.fld6.GetValue()\r\n        if self.rBtn1.GetValue():\r\n            Data7 = 'N'\r\n        elif self.rBtn2.GetValue():\r\n            Data7 = 'C'\r\n        elif self.rBtn3.GetValue():\r\n            Data7 = 'R'\r\n        elif self.rBtn4.GetValue():\r\n            Data7 = 'S'\r\n        else:\r\n            Data7 = ''\r\n        Data8 = self.cBox1.GetValue()\r\n        Data9 = self.cBox2.GetValue()\r\n        return [Data0, Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Temps/MitemFrm2.py b/Temps/MitemFrm2.py
--- a/Temps/MitemFrm2.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/Temps/MitemFrm2.py	(date 1623260221948)
@@ -30,7 +30,7 @@
         wx.Panel.__init__ ( self, parent, id = id, pos = pos, size = size, style = style, name = name )
 
         self.Data = Data
-        print(Data)
+        print(self.Data)
         self.Button = Button
         self.getMData = MS.GetData(u'Menu2.db', u'')
         self.setMDate = MS.SetData(u'', u'', u'')
@@ -45,13 +45,14 @@
 
         Hzp1 = wx.WrapSizer( wx.HORIZONTAL, 0 )
 
-        if Data != []:
+        if Data != [] and Data[2] != 'S':
             self.barname = self.getMData.gBarN(Data[0])[0][0]
             self.C = self.barname[0]
         else:
             self.barname = u''
             self.C = 'P'
 
+        print(self.barname)
         self.title = wx.StaticText( self.P1, wx.ID_ANY, u"Menu Bar: "+ self.barname, wx.DefaultPosition, wx.DefaultSize, 0 )
         self.title.Wrap( -1 )
 
@@ -619,7 +620,7 @@
                 itms = l[0].GetMenuItems()
                 #print(dir(itms[-1]))
                 for i in itms:
-                    print(i.GetId())
+                    #print(i.GetId())
                     if i.IsSeparator() and self.Data[2] == u'Separator':
 
                         i.Destroy()
@@ -630,7 +631,7 @@
                         print(i)
 
     def getHandel(self, imodel, pathfile):
-        print(imodel,pathfile)
+        #print(imodel,pathfile)
         pr = self.getMData.AllHndl()
         #m = imodel.split('.')[1]
         for p in pr:
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Default ignored files\r\n/workspace.xml
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
--- a/.idea/.gitignore	(revision caff947320997299581ac8399129b45394081384)
+++ b/.idea/.gitignore	(date 1624891030008)
@@ -1,2 +1,3 @@
 # Default ignored files
-/workspace.xml
\ No newline at end of file
+/shelf/
+/workspace.xml
Index: AI/Generats.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#In the name of GOD\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom .Analiz import *\r\n\r\nclass Genrate(object):\r\n    def __init__(self,frmname):\r\n        self.imp_pnl = {}\r\n        self.frm_mak = frmname\r\n\r\n        self.lin_wrt = ''\r\n\r\n    def createFrm(self, filnam):\r\n        self.filnam = filnam\r\n        self.impfil = self.filnam.split('\\\\')[-1].replace('.py', '')\r\n        print(self.impfil)\r\n        #pnlfil = Anlzfil(filnam)\r\n        #self.imp_pnl = pnlfil.parsefil()\r\n        #self.GUIpars = pnlfil.getGUIfil()\r\n        #pnlfil.showParse()\r\n\r\n        self.gnr_lins()\r\n        with open(self.frm_mak, 'w') as fl:\r\n            fl.writelines(self.lin_wrt)\r\n\r\n\r\n    def gnr_lins(self):\r\n        line1 = u\"#In the name of GOD\\n\"\r\n        line2 = u\"# -*- coding: utf-8 -*-\\n\"\r\n        line3 = u\"#!usr/bin/env python\\n\\n\"\r\n        self.lin_wrt = line1 + line2 + line3\r\n        self.lin_wrt += self.gnr_imps()\r\n        self.lin_wrt += self.gnr_frm()\r\n        self.lin_wrt += self.gnr_siz()\r\n        self.lin_wrt += self.gnr_min()\r\n        self.lin_wrt += self.gnr_if()\r\n\r\n\r\n    def gnr_imps(self):\r\n        imprtxt = u\"import wx\\n\"\r\n        imprtxt += u\"from  Config.Init import *\\n\"\r\n        imprtxt += u\"import GUI.API.\"+self.impfil+\" as pnl\\n\\n\"\r\n        return imprtxt\r\n\r\n    def gnr_frm(self):\r\n        frmtxt = u\"class telframe(wx.Frame):\\n\"\r\n        frmtxt += u\"\\tdef __init__(self,parent):\\n\"\r\n        frmtxt += u\"\\t\\twx.Frame.__init__(self,parent,style=wx.FRAME_FLOAT_ON_PARENT|wx.DEFAULT_FRAME_STYLE)\\n\"\r\n        frmtxt += u\"\\t\\tself.parent= parent\\n\\n\"\r\n\r\n        frmtxt += u\"\\t\\tself.Pnl = pnl.MyPanel1(self)\\n\\n\"\r\n\r\n        frmtxt += u\"\\tdef closeit(self):\\n\"\r\n        frmtxt += u\"\\t\\tself.Close(True)\\n\\n\"\r\n\r\n        return frmtxt\r\n\r\n    def gnr_siz(self):\r\n        sizdef = u\"def size():\\n\"\r\n        sizdef += u\"\\treturn (-1,-1)\\n\\n\"\r\n        return sizdef\r\n    def gnr_min(self):\r\n        mindef = u\"def main(panel=None ):\\n\"\r\n        mindef += u\"\\tparent =  panel.GetParent()\\n\\n\"\r\n        mindef += u\"\\tframe = telframe(parent )\\n\"\r\n        mindef += u\"\\tframe.SetTitle(u'form')\\n\"\r\n        mindef += u\"\\tframe.SetSize(size())\\n\"\r\n        mindef += u\"\\tframe.Show()\\n\\n\"\r\n        return mindef\r\n\r\n    def gnr_if(self):\r\n        iffil = u\"if __name__ == '__main__':\\n\"\r\n        iffil += u\"\\tmain()\\n\"\r\n        return iffil\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AI/Generats.py b/AI/Generats.py
--- a/AI/Generats.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/AI/Generats.py	(date 1619462478738)
@@ -13,7 +13,7 @@
     def createFrm(self, filnam):
         self.filnam = filnam
         self.impfil = self.filnam.split('\\')[-1].replace('.py', '')
-        print(self.impfil)
+        #print(self.impfil)
         #pnlfil = Anlzfil(filnam)
         #self.imp_pnl = pnlfil.parsefil()
         #self.GUIpars = pnlfil.getGUIfil()
Index: AI/WinDev.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AI/WinDev.py b/AI/WinDev.py
new file mode 100644
--- /dev/null	(date 1622437945364)
+++ b/AI/WinDev.py	(date 1622437945364)
@@ -0,0 +1,62 @@
+#In the name of GOD
+#! /usr/bin/env python
+# -*- coding: utf-8 -*-
+
+import wx
+
+
+class MWC(wx.Frame):
+    def __init__(self):
+        wx.Frame.__init__(self,None)
+
+    @property
+    def CreateWin(self):
+        return self.Create(self,None,1,'Main Window')
+
+    def CreateMenu(self):
+        pass
+
+    def CreateTBar(self):
+        pass
+
+    def CreateStus(self):
+        pass
+
+    def CreatePans(self):
+        pass
+
+    def UpDateWin(self):
+        pass
+
+    def UpDateMenu(self):
+        pass
+
+    def UpDateTBar(self):
+        pass
+
+    def UpDateStus(self):
+        pass
+
+    def UpDatePans(self):
+        pass
+
+
+class WinDevUp(object):
+    def __init__(self):
+        pass
+
+    def __getstate__(self):
+        pass
+
+    def getMenuBar(self):
+        pass
+
+    def getMenuItem(self):
+        pass
+
+    def getToolBar(self):
+        pass
+
+    def getStatue(self):
+        pass
+
Index: DCC/AuiPan1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DCC/AuiPan1.py b/DCC/AuiPan1.py
new file mode 100644
--- /dev/null	(date 1621447531711)
+++ b/DCC/AuiPan1.py	(date 1621447531711)
@@ -0,0 +1,321 @@
+# -*- coding: utf-8 -*-
+
+###########################################################################
+## Python code generated with wxFormBuilder (version Oct 26 2018)
+## http://www.wxformbuilder.org/
+##
+## PLEASE DO *NOT* EDIT THIS FILE!
+###########################################################################
+
+import wx
+import wx.xrc
+
+###########################################################################
+## Class MyPanel1
+###########################################################################
+
+class MyPanel1 ( wx.Panel ):
+
+	def __init__( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 649,391 ), style = wx.TAB_TRAVERSAL, name = wx.EmptyString ):
+		wx.Panel.__init__ ( self, parent, id = id, pos = pos, size = size, style = style, name = name )
+
+		Vsz1 = wx.BoxSizer( wx.VERTICAL )
+
+		Hsz1 = wx.BoxSizer( wx.HORIZONTAL )
+
+		Vsz11 = wx.BoxSizer( wx.VERTICAL )
+
+		self.txt1 = wx.StaticText( self, wx.ID_ANY, u"Aui Pans List:", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt1.Wrap( -1 )
+
+		Vsz11.Add( self.txt1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 5 )
+
+		PAList1Choices = []
+		self.PAList1 = wx.CheckListBox( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, PAList1Choices, 0 )
+		Vsz11.Add( self.PAList1, 1, wx.ALL, 5 )
+
+
+		Hsz1.Add( Vsz11, 0, wx.EXPAND, 5 )
+
+		Vsz12 = wx.BoxSizer( wx.VERTICAL )
+
+		Hsz11 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.txt2 = wx.StaticText( self, wx.ID_ANY, u"Panid", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt2.Wrap( -1 )
+
+		Hsz11.Add( self.txt2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.fld1 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 60,-1 ), 0 )
+		Hsz11.Add( self.fld1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.txt3 = wx.StaticText( self, wx.ID_ANY, u"doking", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt3.Wrap( -1 )
+
+		Hsz11.Add( self.txt3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		chs1Choices = [ u"Top", u"Left", u"Center", u"Right", u"Bottum" ]
+		self.chs1 = wx.Choice( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, chs1Choices, 0 )
+		self.chs1.SetSelection( 1 )
+		Hsz11.Add( self.chs1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.txt4 = wx.StaticText( self, wx.ID_ANY, u"Leyer", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt4.Wrap( -1 )
+
+		Hsz11.Add( self.txt4, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.lyr = wx.SpinCtrlDouble( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 60,-1 ), wx.ALIGN_CENTER_HORIZONTAL|wx.SP_ARROW_KEYS, 0, 9, 0.000000, 1 )
+		self.lyr.SetDigits( 0 )
+		Hsz11.Add( self.lyr, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.chk1 = wx.CheckBox( self, wx.ID_ANY, u"Pin Button", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.chk1.SetValue(True)
+		Hsz11.Add( self.chk1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+
+		Vsz12.Add( Hsz11, 1, wx.EXPAND, 5 )
+
+		Hsz12 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.txt5 = wx.StaticText( self, wx.ID_ANY, u"Dock", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt5.Wrap( -1 )
+
+		Hsz12.Add( self.txt5, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		chs2Choices = [ u"Dock", u"Float" ]
+		self.chs2 = wx.Choice( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, chs2Choices, 0 )
+		self.chs2.SetSelection( 0 )
+		Hsz12.Add( self.chs2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.txt6 = wx.StaticText( self, wx.ID_ANY, u"Resize", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt6.Wrap( -1 )
+
+		Hsz12.Add( self.txt6, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		chs3Choices = [ u"Resizable", u"Fixed" ]
+		self.chs3 = wx.Choice( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, chs3Choices, 0 )
+		self.chs3.SetSelection( 0 )
+		Hsz12.Add( self.chs3, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.txt7 = wx.StaticText( self, wx.ID_ANY, u"Pane Size", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt7.Wrap( -1 )
+
+		Hsz12.Add( self.txt7, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.PSw = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 60,-1 ), 0 )
+		Hsz12.Add( self.PSw, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.PSh = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 60,-1 ), 0 )
+		Hsz12.Add( self.PSh, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+
+		Vsz12.Add( Hsz12, 1, wx.EXPAND, 5 )
+
+		Hsz13 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.txt8 = wx.StaticText( self, wx.ID_ANY, u"name", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt8.Wrap( -1 )
+
+		Hsz13.Add( self.txt8, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.fld2 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz13.Add( self.fld2, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.txt9 = wx.StaticText( self, wx.ID_ANY, u"Best Size", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt9.Wrap( -1 )
+
+		Hsz13.Add( self.txt9, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.BSw = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 60,-1 ), 0 )
+		Hsz13.Add( self.BSw, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.BSh = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 60,-1 ), 0 )
+		Hsz13.Add( self.BSh, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+
+		Vsz12.Add( Hsz13, 1, wx.EXPAND, 5 )
+
+		Hsz14 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.chk2 = wx.CheckBox( self, wx.ID_ANY, u"Disable", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz14.Add( self.chk2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.chk3 = wx.CheckBox( self, wx.ID_ANY, u"Hide", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz14.Add( self.chk3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+
+		Vsz12.Add( Hsz14, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )
+
+		Hsz15 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.txt10 = wx.StaticText( self, wx.ID_ANY, u"Program", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt10.Wrap( -1 )
+
+		Hsz15.Add( self.txt10, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.fil1 = wx.FilePickerCtrl( self, wx.ID_ANY, wx.EmptyString, u"Select a file", u"*.*", wx.DefaultPosition, wx.DefaultSize, wx.FLP_DEFAULT_STYLE|wx.FLP_SMALL )
+		Hsz15.Add( self.fil1, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+
+		Vsz12.Add( Hsz15, 1, wx.EXPAND, 5 )
+
+		Hsz16 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.btn1 = wx.Button( self, wx.ID_ANY, u"Add", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz16.Add( self.btn1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.btn2 = wx.Button( self, wx.ID_ANY, u"Edit", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz16.Add( self.btn2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.btn3 = wx.Button( self, wx.ID_ANY, u"Delete", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz16.Add( self.btn3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.btnprw = wx.Button( self, wx.ID_ANY, u"Preview", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz16.Add( self.btnprw, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+
+		Vsz12.Add( Hsz16, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )
+
+
+		Hsz1.Add( Vsz12, 1, wx.EXPAND, 5 )
+
+
+		Vsz1.Add( Hsz1, 1, wx.EXPAND, 5 )
+
+		Vsz2 = wx.BoxSizer( wx.VERTICAL )
+
+		self.lin1 = wx.StaticLine( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.LI_HORIZONTAL )
+		Vsz2.Add( self.lin1, 0, wx.EXPAND |wx.ALL, 5 )
+
+
+		Vsz1.Add( Vsz2, 0, wx.EXPAND, 5 )
+
+		Vsz3 = wx.BoxSizer( wx.VERTICAL )
+
+		Hsz2 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.txt11 = wx.StaticText( self, wx.ID_ANY, u"Link Database", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt11.Wrap( -1 )
+
+		Hsz2.Add( self.txt11, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.fld3 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz2.Add( self.fld3, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+
+		Vsz3.Add( Hsz2, 0, wx.EXPAND, 5 )
+
+		Hsz3 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.btn4 = wx.Button( self, wx.ID_ANY, u"Open", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz3.Add( self.btn4, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.btn5 = wx.Button( self, wx.ID_ANY, u"Edit", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz3.Add( self.btn5, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.txt12 = wx.StaticText( self, wx.ID_ANY, u"Table", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt12.Wrap( -1 )
+
+		Hsz3.Add( self.txt12, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.tblst = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_MULTILINE )
+		Hsz3.Add( self.tblst, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.txt13 = wx.StaticText( self, wx.ID_ANY, u"field list", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt13.Wrap( -1 )
+
+		Hsz3.Add( self.txt13, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.fldlst = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_MULTILINE )
+		Hsz3.Add( self.fldlst, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+
+		Vsz3.Add( Hsz3, 1, wx.EXPAND, 5 )
+
+		Hsz4 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.btn6 = wx.Button( self, wx.ID_ANY, u"Generate", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz4.Add( self.btn6, 0, wx.ALL, 5 )
+
+
+		Vsz3.Add( Hsz4, 0, wx.EXPAND, 5 )
+
+
+		Vsz1.Add( Vsz3, 0, wx.EXPAND, 5 )
+
+
+		self.SetSizer( Vsz1 )
+		self.Layout()
+
+		# Connect Events
+		self.PAList1.Bind( wx.EVT_LISTBOX_DCLICK, self.slctpn )
+		self.chs1.Bind( wx.EVT_CHOICE, self.dokng )
+		self.lyr.Bind( wx.EVT_TEXT, self.gtlyr )
+		self.lyr.Bind( wx.EVT_TEXT_ENTER, self.gtlyr )
+		self.chk1.Bind( wx.EVT_CHECKBOX, self.pinbtn )
+		self.chs2.Bind( wx.EVT_CHOICE, self.dkflt )
+		self.chs3.Bind( wx.EVT_CHOICE, self.rsizfix )
+		self.chk2.Bind( wx.EVT_CHECKBOX, self.disabl )
+		self.chk3.Bind( wx.EVT_CHECKBOX, self.shohid )
+		self.fil1.Bind( wx.EVT_FILEPICKER_CHANGED, self.progfil )
+		self.btn1.Bind( wx.EVT_BUTTON, self.addpn )
+		self.btn2.Bind( wx.EVT_BUTTON, self.edtpn )
+		self.btn3.Bind( wx.EVT_BUTTON, self.delpn )
+		self.btnprw.Bind( wx.EVT_BUTTON, self.prwiv )
+		self.btn4.Bind( wx.EVT_BUTTON, self.opndb )
+		self.btn5.Bind( wx.EVT_BUTTON, self.edtdb )
+		self.btn6.Bind( wx.EVT_BUTTON, self.gnret )
+
+	def __del__( self ):
+		pass
+
+
+	# Virtual event handlers, overide them in your derived class
+	def slctpn( self, event ):
+		event.Skip()
+
+	def dokng( self, event ):
+		event.Skip()
+
+	def gtlyr( self, event ):
+		event.Skip()
+
+
+	def pinbtn( self, event ):
+		event.Skip()
+
+	def dkflt( self, event ):
+		event.Skip()
+
+	def rsizfix( self, event ):
+		event.Skip()
+
+	def disabl( self, event ):
+		event.Skip()
+
+	def shohid( self, event ):
+		event.Skip()
+
+	def progfil( self, event ):
+		event.Skip()
+
+	def addpn( self, event ):
+		event.Skip()
+
+	def edtpn( self, event ):
+		event.Skip()
+
+	def delpn( self, event ):
+		event.Skip()
+
+	def prwiv( self, event ):
+		event.Skip()
+
+	def opndb( self, event ):
+		event.Skip()
+
+	def edtdb( self, event ):
+		event.Skip()
+
+	def gnret( self, event ):
+		event.Skip()
\ No newline at end of file
Index: DCC/DBDev1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DCC/DBDev1.py b/DCC/DBDev1.py
new file mode 100644
--- /dev/null	(date 1624443056798)
+++ b/DCC/DBDev1.py	(date 1624443056798)
@@ -0,0 +1,265 @@
+# -*- coding: utf-8 -*-
+
+###########################################################################
+## Python code generated with wxFormBuilder (version Oct 26 2018)
+## http://www.wxformbuilder.org/
+##
+## PLEASE DO *NOT* EDIT THIS FILE!
+###########################################################################
+
+import wx
+import wx.xrc
+
+###########################################################################
+## Class MyPanel1
+###########################################################################
+
+class MyPanel1 ( wx.Panel ):
+
+	def __init__( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 430,455 ), style = wx.TAB_TRAVERSAL, name = wx.EmptyString ):
+		wx.Panel.__init__ ( self, parent, id = id, pos = pos, size = size, style = style, name = name )
+
+		Vsz1 = wx.BoxSizer( wx.VERTICAL )
+
+		Hsz1 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.txt1 = wx.StaticText( self, wx.ID_ANY, u"Database", wx.DefaultPosition, wx.Size( 60,-1 ), 0 )
+		self.txt1.Wrap( -1 )
+
+		Hsz1.Add( self.txt1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.filedb = wx.FilePickerCtrl( self, wx.ID_ANY, wx.EmptyString, u"Select a file", u"*.*", wx.DefaultPosition, wx.DefaultSize, wx.FLP_DEFAULT_STYLE|wx.FLP_SMALL )
+		Hsz1.Add( self.filedb, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+
+		Vsz1.Add( Hsz1, 0,wx.EXPAND, 5 )
+
+		Hsz2 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.txt2 = wx.StaticText( self, wx.ID_ANY, u"Method", wx.DefaultPosition, wx.Size( 60,-1 ), 0 )
+		self.txt2.Wrap( -1 )
+
+		Hsz2.Add( self.txt2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		chs1Choices = [ u"Input", u"Output" ]
+		self.chs1 = wx.Choice( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, chs1Choices, 0 )
+		self.chs1.SetSelection( 0 )
+		Hsz2.Add( self.chs1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.line2 = wx.StaticLine( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.LI_VERTICAL )
+		Hsz2.Add( self.line2, 0, wx.EXPAND |wx.ALL, 5 )
+
+
+		Hsz2.Add( ( 0, 0), 1, wx.EXPAND, 5 )
+
+		self.btn1 = wx.Button( self, wx.ID_ANY, u"Change Data", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz2.Add( self.btn1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.btn2 = wx.Button( self, wx.ID_ANY, u"To CVS", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz2.Add( self.btn2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.btn3 = wx.Button( self, wx.ID_ANY, u"...", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT )
+		Hsz2.Add( self.btn3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+
+		Vsz1.Add( Hsz2, 0, wx.EXPAND, 5 )
+
+		Hsz3 = wx.BoxSizer( wx.HORIZONTAL )
+
+		Vsz11 = wx.BoxSizer( wx.VERTICAL )
+
+		self.txt3 = wx.StaticText( self, wx.ID_ANY, u"Tables List", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt3.Wrap( -1 )
+
+		Vsz11.Add( self.txt3, 0, wx.ALL, 5 )
+
+		TblstChoices = []
+		self.Tblst = wx.CheckListBox( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, TblstChoices, 0 )
+		Vsz11.Add( self.Tblst, 1, wx.ALL|wx.EXPAND, 5 )
+
+
+		Hsz3.Add( Vsz11, 1, wx.EXPAND, 5 )
+
+		Vsz12 = wx.BoxSizer( wx.VERTICAL )
+
+		self.txt4 = wx.StaticText( self, wx.ID_ANY, u"Feilds List", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt4.Wrap( -1 )
+
+		Vsz12.Add( self.txt4, 0, wx.ALL, 5 )
+
+		FldlstChoices = []
+		self.Fldlst = wx.ListBox( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, FldlstChoices, 0 )
+		Vsz12.Add( self.Fldlst, 1, wx.ALL|wx.EXPAND, 5 )
+
+
+		Hsz3.Add( Vsz12, 1, wx.EXPAND, 5 )
+
+		Vsz13 = wx.BoxSizer( wx.VERTICAL )
+
+		self.txt5 = wx.StaticText( self, wx.ID_ANY, u"Command", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt5.Wrap( -1 )
+
+		Vsz13.Add( self.txt5, 0, wx.ALL, 5 )
+
+		self.line1 = wx.StaticLine(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.LI_HORIZONTAL)
+		Vsz13.Add( self.line1, 0, wx.EXPAND |wx.ALL, 5 )
+
+		self.rdio1 = wx.RadioButton(self, wx.ID_ANY, u"Join", wx.DefaultPosition, wx.DefaultSize, 0)
+		Vsz13.Add(self.rdio1, 0, wx.ALL, 5)
+
+		self.rdio2 = wx.RadioButton(self, wx.ID_ANY, u"Select", wx.DefaultPosition, wx.DefaultSize, 0)
+		Vsz13.Add(self.rdio2, 0, wx.ALL, 5)
+
+		self.rdio3 = wx.RadioButton(self, wx.ID_ANY, u"Insert", wx.DefaultPosition, wx.DefaultSize, 0)
+		Vsz13.Add(self.rdio3, 0, wx.ALL, 5)
+
+		self.rdio4 = wx.RadioButton(self, wx.ID_ANY, u"Update", wx.DefaultPosition, wx.DefaultSize, 0)
+		Vsz13.Add(self.rdio4, 0, wx.ALL, 5)
+
+		self.rdio5 = wx.RadioButton(self, wx.ID_ANY, u"Delete", wx.DefaultPosition, wx.DefaultSize, 0)
+		Vsz13.Add(self.rdio5, 0, wx.ALL, 5)
+
+		self.rdio6 = wx.RadioButton(self, wx.ID_ANY, u"peer to peer", wx.DefaultPosition, wx.DefaultSize, 0)
+		Vsz13.Add(self.rdio6, 0, wx.ALL, 5)
+
+
+		Hsz3.Add( Vsz13, 1, wx.EXPAND, 5 )
+
+
+		Vsz1.Add( Hsz3, 1, wx.EXPAND, 5 )
+
+		Hsz4 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.txt6 = wx.StaticText( self, wx.ID_ANY, u"Where Clause", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt6.Wrap( -1 )
+
+		Hsz4.Add( self.txt6, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.fld1 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz4.Add( self.fld1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		dlmntChoices = [ u"=", u"Is", u">", u"<", u">=", u"=>", u"In", u"Is Null" ]
+		self.dlmnt = wx.Choice( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, dlmntChoices, 0 )
+		self.dlmnt.SetSelection( 0 )
+		Hsz4.Add( self.dlmnt, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+		self.fld2 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz4.Add( self.fld2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )
+
+
+		Vsz1.Add( Hsz4, 0, wx.EXPAND, 5 )
+
+		Hsz5 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.txt7 = wx.StaticText( self, wx.ID_ANY, u"Program Statement", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt7.Wrap( 1 )
+
+		Hsz5.Add( self.txt7, 0, wx.ALL, 5 )
+
+		self.filprg = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_MULTILINE )
+		Hsz5.Add( self.filprg, 1, wx.ALL, 5 )
+
+		self.btn4 = wx.Button( self, wx.ID_ANY, u"...", wx.DefaultPosition, wx.DefaultSize, wx.BORDER_NONE|wx.BU_EXACTFIT )
+		Hsz5.Add( self.btn4, 0, wx.ALL, 5 )
+
+
+		Vsz1.Add( Hsz5, 0, wx.EXPAND, 5 )
+
+		Hsz6 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.txt8 = wx.StaticText( self, wx.ID_ANY, u"SQL Statement", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.txt8.Wrap( 1 )
+
+		Hsz6.Add( self.txt8, 0, wx.ALL, 5 )
+
+		self.fldsql = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_MULTILINE )
+		Hsz6.Add( self.fldsql, 1, wx.ALL, 5 )
+
+		self.btn5 = wx.Button( self, wx.ID_ANY, u"...", wx.DefaultPosition, wx.DefaultSize, wx.BORDER_NONE|wx.BU_EXACTFIT )
+		Hsz6.Add( self.btn5, 0, wx.ALL, 5 )
+
+
+		Vsz1.Add( Hsz6, 0, wx.EXPAND, 5 )
+
+		Hsz7 = wx.BoxSizer( wx.HORIZONTAL )
+
+		self.btn6 = wx.Button( self, wx.ID_ANY, u"Make SQL", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz7.Add( self.btn6, 0, wx.ALL, 5 )
+
+		self.btn7 = wx.Button( self, wx.ID_ANY, u"Copy Line", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz7.Add( self.btn7, 0, wx.ALL, 5 )
+
+		self.btn8 = wx.Button( self, wx.ID_ANY, u"To Program", wx.DefaultPosition, wx.DefaultSize, 0 )
+		Hsz7.Add( self.btn8, 0, wx.ALL, 5 )
+
+
+		Vsz1.Add( Hsz7, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )
+
+
+		self.SetSizer( Vsz1 )
+		self.Layout()
+
+		# Connect Events
+		self.filedb.Bind( wx.EVT_FILEPICKER_CHANGED, self.dbfil )
+		self.chs1.Bind( wx.EVT_CHOICE, self.dbmtd )
+		self.btn1.Bind( wx.EVT_BUTTON, self.chgdata )
+		self.btn2.Bind( wx.EVT_BUTTON, self.tocvs )
+		self.btn3.Bind( wx.EVT_BUTTON, self.othrfil )
+		self.Tblst.Bind( wx.EVT_LISTBOX, self.slctbl )
+		self.Tblst.Bind( wx.EVT_LISTBOX_DCLICK, self.slctbl )
+		self.Fldlst.Bind( wx.EVT_LISTBOX, self.fldlst )
+		self.Fldlst.Bind( wx.EVT_LISTBOX_DCLICK, self.fldlst )
+		self.dlmnt.Bind( wx.EVT_CHOICE, self.chs2 )
+		self.btn4.Bind( wx.EVT_BUTTON, self.cpyps )
+		self.btn5.Bind( wx.EVT_BUTTON, self.cpysql )
+		self.btn6.Bind( wx.EVT_BUTTON, self.mksql )
+		self.btn7.Bind( wx.EVT_BUTTON, self.cpylin )
+		self.btn8.Bind( wx.EVT_BUTTON, self.toprg )
+
+	def __del__( self ):
+		pass
+
+
+	# Virtual event handlers, overide them in your derived class
+	def dbfil( self, event ):
+		event.Skip()
+
+	def dbmtd( self, event ):
+		event.Skip()
+
+	def chgdata( self, event ):
+		event.Skip()
+
+	def tocvs( self, event ):
+		event.Skip()
+
+	def othrfil( self, event ):
+		event.Skip()
+
+	def slctbl( self, event ):
+		event.Skip()
+
+
+	def fldlst( self, event ):
+		event.Skip()
+
+
+	def chs2( self, event ):
+		event.Skip()
+
+	def cpyps( self, event ):
+		event.Skip()
+
+	def cpysql( self, event ):
+		event.Skip()
+
+	def mksql( self, event ):
+		event.Skip()
+
+	def cpylin( self, event ):
+		event.Skip()
+
+	def toprg( self, event ):
+		event.Skip()
+
+
Index: DCC/MenuDev1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n\r\n###########################################################################\r\n## Python code generated with wxFormBuilder (version Oct 26 2018)\r\n## http://www.wxformbuilder.org/\r\n##\r\n## PLEASE DO *NOT* EDIT THIS FILE!\r\n###########################################################################\r\n\r\nimport wx\r\nimport wx.xrc\r\nimport wx.dataview\r\nimport wx.stc as stc\r\n\r\nimport Database.MenuSet2 as MS\r\nfrom . import MitemFrm2 as MF\r\n\r\nfrom Config.Init import *\r\n\r\n###########################################################################\r\n## Class MyPanel1\r\n###########################################################################\r\n\r\nclass MyPanel1 ( wx.Panel ):\r\n\r\n    def __init__( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 646,300 ), style = wx.TAB_TRAVERSAL, name = wx.EmptyString ):\r\n        wx.Panel.__init__ ( self, parent, id = id, pos = pos, size = size, style = style, name = name )\r\n\r\n        Vsz1 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        self.Spw1 = wx.SplitterWindow( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.SP_3DSASH|wx.SP_NO_XP_THEME )\r\n        self.Spw1.Bind( wx.EVT_IDLE, self.Spw1OnIdle )\r\n\r\n        self.pnl1 = wx.Panel( self.Spw1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )\r\n        Vsz2 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        self.TLCtrl1 = wx.dataview.TreeListCtrl( self.pnl1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize,wx.dataview.TL_CHECKBOX|wx.dataview.TL_DEFAULT_STYLE|wx.dataview.TL_MULTIPLE )\r\n        self.TLCtrl1.AppendColumn( u\"ID\", wx.COL_WIDTH_DEFAULT, wx.ALIGN_LEFT, wx.COL_RESIZABLE )\r\n        self.TLCtrl1.AppendColumn( u\"Name\", wx.COL_WIDTH_DEFAULT, wx.ALIGN_LEFT, wx.COL_RESIZABLE )\r\n        self.TLCtrl1.AppendColumn( u\"dir\", wx.COL_WIDTH_DEFAULT, wx.ALIGN_LEFT, wx.COL_RESIZABLE )\r\n        self.TLCtrl1.AppendColumn( u\"access\", wx.COL_WIDTH_DEFAULT, wx.ALIGN_LEFT, wx.COL_RESIZABLE )\r\n\r\n        Vsz2.Add( self.TLCtrl1, 1, wx.EXPAND |wx.ALL, 5 )\r\n\r\n        self.MyMenu = MS.GetData(u'Menu2.db', u'')\r\n        self.DoMenu = MS.SetData(u'',u'',u'')\r\n\r\n        self.fillList()\r\n\r\n        self.pnl1.SetSizer( Vsz2 )\r\n        self.pnl1.Layout()\r\n        Vsz2.Fit( self.pnl1 )\r\n        self.pnl2 = wx.Panel( self.Spw1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )\r\n        Vsz3 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        self.btn1 = wx.Button( self.pnl2, wx.ID_ANY, u\"Add\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Vsz3.Add( self.btn1, 0, wx.ALL, 5 )\r\n\r\n        self.btn2 = wx.Button( self.pnl2, wx.ID_ANY, u\"Edit\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Vsz3.Add( self.btn2, 0, wx.ALL, 5 )\r\n\r\n        self.btn3 = wx.Button( self.pnl2, wx.ID_ANY, u\"Delete\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Vsz3.Add( self.btn3, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vsz3.Add( ( 0, 0), 1, wx.EXPAND, 5 )\r\n\r\n        self.btn4 = wx.Button( self.pnl2, wx.ID_ANY, u\"Separator\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Vsz3.Add( self.btn4, 0, wx.ALL, 5 )\r\n\r\n\r\n        self.pnl2.SetSizer( Vsz3 )\r\n        self.pnl2.Layout()\r\n        Vsz3.Fit( self.pnl2 )\r\n        self.Spw1.SplitVertically( self.pnl1, self.pnl2, 532 )\r\n        Vsz1.Add( self.Spw1, 1, wx.EXPAND, 5 )\r\n\r\n        VL = wx.BoxSizer(wx.VERTICAL)\r\n\r\n        self.Line = wx.StaticLine(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.LI_HORIZONTAL)\r\n        VL.Add(self.Line, 0, wx.EXPAND | wx.ALL, 5)\r\n\r\n        Vsz1.Add(VL, 0, wx.EXPAND, 5)\r\n\r\n        Hz1 = wx.BoxSizer(wx.HORIZONTAL)\r\n\r\n        self.btna = wx.Button(self, wx.ID_ANY, u\"New Bar\", wx.DefaultPosition, wx.DefaultSize, 0)\r\n        Hz1.Add(self.btna, 0, wx.ALL, 5)\r\n\r\n        self.btnb = wx.Button(self, wx.ID_ANY, u\"Change Bar\", wx.DefaultPosition, wx.DefaultSize, 0)\r\n        Hz1.Add(self.btnb, 0, wx.ALL, 5)\r\n\r\n        self.btnc = wx.Button(self, wx.ID_ANY, u\"Delete Bar\", wx.DefaultPosition, wx.DefaultSize, 0)\r\n        Hz1.Add(self.btnc, 0, wx.ALL, 5)\r\n\r\n        Vsz1.Add(Hz1, 0, wx.EXPAND, 5)\r\n\r\n        self.txt = stc.StyledTextCtrl()\r\n\r\n        self.SetSizer( Vsz1 )\r\n        self.Layout()\r\n\r\n        # Connect Events\r\n        self.TLCtrl1.Bind( wx.dataview.EVT_TREELIST_ITEM_CHECKED, self.DoshowItm )\r\n        self.TLCtrl1.Bind( wx.dataview.EVT_TREELIST_ITEM_CONTEXT_MENU, self.Thismenu )\r\n        self.TLCtrl1.Bind(wx.dataview.EVT_DATAVIEW_ITEM_ACTIVATED, self.Thismenu)\r\n        self.btn1.Bind( wx.EVT_BUTTON, self.Additm )\r\n        self.btn2.Bind( wx.EVT_BUTTON, self.edititm )\r\n        self.btn3.Bind( wx.EVT_BUTTON, self.delitm )\r\n        self.btn4.Bind( wx.EVT_BUTTON, self.aplyit )\r\n        self.btna.Bind(wx.EVT_BUTTON, self.Nbar)\r\n        self.btnb.Bind(wx.EVT_BUTTON, self.Cbar)\r\n        self.btnc.Bind(wx.EVT_BUTTON, self.Dbar)\r\n\r\n    def __del__( self ):\r\n        pass\r\n\r\n\r\n    # Virtual event handlers, overide them in your derived class\r\n    def DoshowItm( self, event ):\r\n        print(event.GetEventObject())\r\n        print(dir(event.GetEventObject()))\r\n        event.Skip()\r\n\r\n    def Thismenu( self, event ):\r\n        ps = self.TLCtrl1.GetSelections()\r\n        self.itmcod = self.TLCtrl1.GetItemText(ps[0],0)\r\n        self.itmnam = self.TLCtrl1.GetItemText(ps[0],1)\r\n        self.itmdir = self.TLCtrl1.GetItemText(ps[0],2)\r\n        self.itmacc = self.TLCtrl1.GetItemText(ps[0],3)\r\n        if int(self.itmcod) < 1000 and int(self.itmcod)%10 == 1:\r\n            self.Cbar(None)\r\n        elif int(self.itmcod) > 1000:\r\n            #print(self.itmnam)\r\n            self.edititm(None)\r\n        else:\r\n            print(self.itmnam,self.itmcod)\r\n        event.Skip()\r\n\r\n    def fillList(self):\r\n        broot = self.TLCtrl1.GetRootItem()\r\n        roots = self.MyMenu.AllBar()\r\n\r\n        for r in roots:\r\n            grp_roots = self.TLCtrl1.AppendItem(broot, 'Bar Menu')\r\n            self.TLCtrl1.SetItemText(grp_roots, 0, str(r[0]))\r\n            self.TLCtrl1.SetItemText(grp_roots, 1, r[1])\r\n            self.TLCtrl1.SetItemText(grp_roots, 2, r[2])\r\n            self.TLCtrl1.SetItemText(grp_roots, 3, r[3])\r\n            items = self.MyMenu.ShowItem(r[0])\r\n            # items = self.MyMenu.AmenuItm(r[0])\r\n            # print(items)\r\n            for i in items:\r\n                chditm = self.TLCtrl1.AppendItem(grp_roots, 'Items Menu')\r\n                self.TLCtrl1.SetItemText(chditm, 0, str(i[1]))\r\n                if i[3] == None or i[3] == '':\r\n                    self.TLCtrl1.SetItemText(chditm, 1, '---')\r\n                    self.TLCtrl1.SetItemText(chditm, 2, '---')\r\n                else:\r\n                    self.TLCtrl1.SetItemText(chditm, 1, str(i[3]))\r\n                    self.TLCtrl1.SetItemText(chditm, 2, str(i[4]))\r\n                self.TLCtrl1.SetItemText(chditm, 3, str(i[5]))\r\n\r\n    def Additm( self, event ):\r\n        ps = self.TLCtrl1.GetSelections()\r\n        self.itmcod = self.TLCtrl1.GetItemText(ps[0], 0)\r\n\r\n        itdd = self.MyMenu.getmItem(int(self.itmcod))\r\n        if itdd == []:\r\n            itdd = [self.itmcod,[]]\r\n        else:\r\n            itdd = itdd[0]\r\n        #print(self.itmcod,itdd[0])\r\n        self.Frm = wx.Frame(self, style=wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)\r\n        self.Pnl = MF.MyPanel1(self.Frm,[itdd[0],itdd[1]],u'AddNew')\r\n        self.Frm.SetSize((700,360))\r\n        self.Frm.Show()\r\n        #event.Skip()\r\n\r\n\r\n    def edititm( self, event ):\r\n        ps = self.TLCtrl1.GetSelections()\r\n        self.itmcod = self.TLCtrl1.GetItemText(ps[0], 0)\r\n\r\n        itdd = self.MyMenu.getmItem(int(self.itmcod))[0]\r\n        #print(itdd)\r\n        self.Frm = wx.Frame(self, style=wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)\r\n        self.Pnl = MF.MyPanel1(self.Frm,itdd,'UpDate')\r\n        self.Frm.SetSize((700, 360))\r\n        self.Frm.Show()\r\n        #event.Skip()\r\n\r\n    def delitm( self, event ):\r\n        ps = self.TLCtrl1.GetSelections()\r\n        self.itmcod = self.TLCtrl1.GetItemText(ps[0], 0)\r\n\r\n        itdd = self.MyMenu.getmItem(int(self.itmcod))[0]\r\n        self.Frm = wx.Frame(self, style=wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)\r\n        self.Pnl = MF.MyPanel1(self.Frm,itdd, 'Delete')\r\n        self.Frm.SetSize((700, 360))\r\n        self.Frm.Show()\r\n        #event.Skip()\r\n\r\n    def aplyit( self, event ):\r\n        ps = self.TLCtrl1.GetSelections()\r\n        self.itmcod = self.TLCtrl1.GetItemText(ps[0], 0)\r\n\r\n        itdd = self.MyMenu.getmItem(int(self.itmcod))[0]\r\n        litm = self.MyMenu.gItem(itdd[0])\r\n        #print(itdd)\r\n        #print(int(litm[-1][1])+1)\r\n        self.DoMenu.Table = 'mitem'\r\n        self.DoMenu.Additem(u'mbarid, itemid',[itdd[0],int(litm[-1][1])+1])\r\n        mw = self.FindWindowByName('main')\r\n        mb = mw.GetMenuBar()\r\n        #lmb = mb.GetMenus()\r\n        mbr = mb.FindItem(itdd[1])\r\n        #indx = mbr[1].FindChildItem(itdd[1])[1]\r\n        mbr[1].AppendSeparator()\r\n        self.TLCtrl1.DeleteAllItems()\r\n        self.fillList()\r\n        self.Refresh()\r\n        self.Layout()\r\n\r\n\r\n    def Nbar(self, event):\r\n        title = \"Note:   Avoid duplicate code for create and choose the correct format [991] [99az] \\\r\n                 A list of definition and access codes can be viewed at the last button in first row [...] \\\r\n                 You can use the same directories for the several menu bar . \"\r\n        self.Frm = wx.Dialog(self)\r\n        self.Pnl = MyPanel3(self.Frm,['','','','',[(u'',u'',u'',u'')]], 'Create',title)\r\n        self.Frm.SetSize((500, 235))\r\n        self.Frm.SetTitle('New Menu Bar')\r\n        self.Frm.ShowModal()\r\n        self.TLCtrl1.DeleteAllItems()\r\n        self.fillList()\r\n        self.Refresh()\r\n        self.Layout()\r\n        self.Frm.Destroy()\r\n\r\n    def Cbar(self, event):\r\n        title = \"Note:   Avoid duplicate code for changes and choose the correct format [991] [99az] \\\r\n                 A list of definition and access codes can be viewed at the last button in first row [...]\\\r\n                 You can use the same directories for the several menu bar . \"\r\n        ps = self.TLCtrl1.GetSelections()\r\n        self.itmcod = self.TLCtrl1.GetItemText(ps[0], 0)\r\n        self.itmnam = self.TLCtrl1.GetItemText(ps[0], 1)\r\n        self.itmdir = self.TLCtrl1.GetItemText(ps[0], 2)\r\n        self.itmacc = self.TLCtrl1.GetItemText(ps[0], 3)\r\n        self.accrcd = self.MyMenu.Acclvl(self.itmacc)\r\n        dd = [self.itmnam,self.itmcod,self.itmacc,self.itmdir,self.accrcd]\r\n        self.Frm = wx.Dialog(self)\r\n        self.Pnl = MyPanel3(self.Frm,dd,'Change',title)\r\n        self.Frm.SetSize((500, 235))\r\n        self.Frm.SetTitle('Change Menu Bar')\r\n        self.Frm.ShowModal()\r\n        self.TLCtrl1.DeleteAllItems()\r\n        self.fillList()\r\n        self.Refresh()\r\n        self.Layout()\r\n        self.Frm.Destroy()\r\n\r\n    def Dbar(self, event):\r\n        title = \" Note : that by deleting the menu bar, all the items below it will also be removed \\\r\n                  Only the programs attached to the items will not be removed and the code will remain \\\r\n                  You can assign them to other items or create a new item . \"\r\n        ps = self.TLCtrl1.GetSelections()\r\n        self.itmcod = self.TLCtrl1.GetItemText(ps[0], 0)\r\n        self.itmnam = self.TLCtrl1.GetItemText(ps[0], 1)\r\n        self.itmdir = self.TLCtrl1.GetItemText(ps[0], 2)\r\n        self.itmacc = self.TLCtrl1.GetItemText(ps[0], 3)\r\n        self.accrcd = self.MyMenu.Acclvl(self.itmacc)\r\n        dd = [self.itmnam, self.itmcod, self.itmacc, self.itmdir,self.accrcd]\r\n        self.Frm = wx.Dialog(self)\r\n        self.Pnl = MyPanel3(self.Frm,dd,'Delete',title)\r\n        self.Frm.SetSize((500, 235))\r\n        self.Frm.SetTitle('Delete Menu Bar')\r\n        self.Frm.ShowModal()\r\n        if self.Pnl.Action:\r\n            wx.MessageBox(u'Menu Bar and Access and Sub Item successfully Deleted')\r\n        self.TLCtrl1.DeleteAllItems()\r\n        self.fillList()\r\n        self.Refresh()\r\n        self.Layout()\r\n        self.Frm.Destroy()\r\n\r\n    def Spw1OnIdle( self, event ):\r\n        self.Spw1.SetSashPosition( 532 )\r\n        self.Spw1.Unbind( wx.EVT_IDLE )\r\n\r\n\r\n\r\n###########################################################################\r\n## Class MyPanel3\r\n###########################################################################\r\n\r\nclass MyPanel3 ( wx.Panel ):\r\n\r\n    def __init__( self, parent,Data,Buttom ,title,id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 500,235 ), style = wx.TAB_TRAVERSAL, name = wx.EmptyString ):\r\n        wx.Panel.__init__ ( self, parent, id = id, pos = pos, size = size, style = style, name = name )\r\n\r\n        self.Data = Data\r\n        self.GetMenu = MS.GetData(u'Menu2.db',u'')\r\n        self.SetMenu = MS.SetData(u'',u'',u'')\r\n        self.Action = False\r\n        self.box1val = 1\r\n        self.box2val = 'FFFF'\r\n        self.oldbar = self.Data[0]\r\n\r\n        Vsz1 = wx.BoxSizer(wx.VERTICAL)\r\n\r\n        Vst = wx.BoxSizer(wx.VERTICAL)\r\n\r\n        self.title = wx.StaticText(self, wx.ID_ANY, title, wx.DefaultPosition, wx.DefaultSize,0)\r\n        self.title.Wrap(1)\r\n        Vst.Add(self.title, 1, wx.ALL | wx.EXPAND, 5)\r\n\r\n        Vsz1.Add(Vst, 1, wx.EXPAND, 5)\r\n\r\n        Hsz1 = wx.BoxSizer(wx.HORIZONTAL)\r\n\r\n        self.txt1 = wx.StaticText(self, wx.ID_ANY, u\"Bar name\", wx.DefaultPosition, wx.DefaultSize, 0)\r\n        self.txt1.Wrap(-1)\r\n\r\n        Hsz1.Add(self.txt1, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        self.fld1 = wx.TextCtrl(self, wx.ID_ANY, self.Data[0], wx.DefaultPosition, wx.DefaultSize, 0)\r\n        Hsz1.Add(self.fld1, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        self.txt2 = wx.StaticText(self, wx.ID_ANY, u\"ID\", wx.DefaultPosition, wx.DefaultSize, 0)\r\n        self.txt2.Wrap(-1)\r\n\r\n        Hsz1.Add(self.txt2, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        self.fld2 = wx.TextCtrl(self, wx.ID_ANY, self.Data[1], wx.DefaultPosition, wx.Size(50, -1), 0)\r\n        Hsz1.Add(self.fld2, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        self.txt3 = wx.StaticText(self, wx.ID_ANY, u\"Access\", wx.DefaultPosition, wx.DefaultSize, 0)\r\n        self.txt3.Wrap(-1)\r\n\r\n        Hsz1.Add(self.txt3, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        self.fld3 = wx.TextCtrl(self, wx.ID_ANY, self.Data[2], wx.DefaultPosition, wx.Size(50, -1), 0)\r\n        Hsz1.Add(self.fld3, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        self.m_button24 = wx.Button(self, wx.ID_ANY, u\"...\", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT)\r\n        Hsz1.Add(self.m_button24, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        Vsz1.Add(Hsz1, 0, wx.EXPAND, 5)\r\n\r\n        Hsz2 = wx.BoxSizer(wx.HORIZONTAL)\r\n\r\n        self.txt4 = wx.StaticText(self, wx.ID_ANY, u\"Directory\", wx.DefaultPosition, wx.DefaultSize, 0)\r\n        self.txt4.Wrap(-1)\r\n\r\n        Hsz2.Add(self.txt4, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        self.dirct = wx.DirPickerCtrl(self, wx.ID_ANY, GUI_PATH+self.Data[3][4:], u\"Select a folder\", wx.DefaultPosition,\r\n                                      wx.DefaultSize, wx.DIRP_DEFAULT_STYLE | wx.DIRP_SMALL)\r\n        Hsz2.Add(self.dirct, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        Vsz1.Add(Hsz2, 0, wx.EXPAND, 5)\r\n\r\n        Hsz3 = wx.BoxSizer(wx.HORIZONTAL)\r\n\r\n        self.box1 = wx.CheckBox(self, wx.ID_ANY, u\"Disable\", wx.DefaultPosition, wx.DefaultSize, 0)\r\n        Hsz3.Add(self.box1, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        self.box2 = wx.CheckBox(self, wx.ID_ANY, u\"Hiden\", wx.DefaultPosition, wx.DefaultSize, 0)\r\n        Hsz3.Add(self.box2, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        if self.Data[4][0][2] == '0000':\r\n            self.box2.SetValue(True)\r\n        if self.Data[4][0][3] == 0:\r\n            self.box1.SetValue(True)\r\n\r\n        Vsz1.Add(Hsz3, 0, wx.ALIGN_CENTER_HORIZONTAL, 5)\r\n\r\n        Hsz4 = wx.BoxSizer(wx.HORIZONTAL)\r\n\r\n        Hsz4.Add((0, 0), 1, wx.EXPAND, 5)\r\n\r\n        self.btn1 = wx.Button(self, wx.ID_ANY, u\"Cancle\", wx.DefaultPosition, wx.DefaultSize, 0)\r\n        Hsz4.Add(self.btn1, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        self.btn2 = wx.Button(self, wx.ID_ANY, Buttom, wx.DefaultPosition, wx.DefaultSize, 0)\r\n        Hsz4.Add(self.btn2, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)\r\n\r\n        Vsz1.Add(Hsz4, 0, wx.EXPAND, 5)\r\n\r\n        self.SetSizer(Vsz1)\r\n        self.Layout()\r\n\r\n        # Connect Events\r\n        self.m_button24.Bind(wx.EVT_BUTTON, self.srchit)\r\n        self.dirct.Bind(wx.EVT_DIRPICKER_CHANGED, self.bardir)\r\n        self.box1.Bind(wx.EVT_CHECKBOX, self.disbar)\r\n        self.box2.Bind(wx.EVT_CHECKBOX, self.hidbar)\r\n        self.btn1.Bind(wx.EVT_BUTTON, self.cancl)\r\n        self.btn2.Bind(wx.EVT_BUTTON, self.doit)\r\n\r\n    def __del__(self):\r\n        pass\r\n\r\n        # Virtual event handlers, overide them in your derived class\r\n\r\n    def srchit(self, event):\r\n        event.Skip()\r\n\r\n    def bardir(self, event):\r\n        mydir = event.GetEventObject().GetPath()\r\n        mydir.replace(GUI_PATH,u\"GUI.\")\r\n        #print(mydir)\r\n\r\n        self.newdir = mydir.replace(GUI_PATH,u\"GUI.\")\r\n        #print(self.newdir)\r\n\r\n    def disbar(self, event):\r\n        if event.GetEventObject().GetValue():\r\n            self.box1val = 0\r\n        else:\r\n            self.box1val = 1\r\n        #print(self.box1val)\r\n\r\n    def hidbar(self, event):\r\n        if event.GetEventObject().GetValue():\r\n            self.box2val = '0000'\r\n        else:\r\n            self.box2val = 'FFFF'\r\n        #print(self.box2val)\r\n\r\n    def cancl(self, event):\r\n        self.Action = False\r\n        q = self.GetParent()\r\n        q.Close()\r\n\r\n    def doit(self, event):\r\n        mw = self.FindWindowByName('main')\r\n        mb = mw.GetMenuBar()\r\n        if event.GetEventObject().GetLabel() == 'Create':\r\n            data1 = self.fld1.GetValue()\r\n            data2 = self.fld2.GetValue()\r\n            data3 = self.fld3.GetValue()\r\n            mydir = self.dirct.GetPath()\r\n            self.newdir = mydir.replace(GUI_PATH, u\"GUI.\")\r\n            self.SetMenu.Table = u'menubar'\r\n            self.SetMenu.Additem(u'mbarid , mbarname , mbardir ,  acclvlid ', (data2,data1,self.newdir,data3))\r\n            data4 = self.box1val\r\n            data5 = self.box2val\r\n            self.SetMenu.Table = u'access'\r\n            self.SetMenu.Additem(u'acclvlid , userid , acclvl , disenable ',(data3, 1, data5, data4))\r\n\r\n            mb.Append(wx.Menu(),data1)\r\n\r\n\r\n        elif event.GetEventObject().GetLabel() == 'Change':\r\n            data1 = self.fld1.GetValue()\r\n            mydir = self.dirct.GetPath()\r\n            self.newdir = mydir.replace(GUI_PATH,u\"GUI.\")\r\n            self.SetMenu.Table = u'menubar'\r\n            self.SetMenu.Upditem(u'mbarname = ? , mbardir = ?  where mbarid = %s ' % self.Data[1],(data1,self.newdir))\r\n            mb.SetMenuLabel(mb.FindMenu(self.oldbar),data1)\r\n\r\n        elif event.GetEventObject().GetLabel() == 'Delete':\r\n            self.SetMenu.Table = u'menubar'\r\n            self.SetMenu.Delitem(u\" menubar.mbarid = %s\" % self.Data[1] )\r\n            self.SetMenu.Table = u'access'\r\n            self.SetMenu.Delitem(u\" access.acclvlid = '%s' \"% self.Data[2])\r\n            if len(self.GetMenu.gBarItm(self.Data[1])) != 0:\r\n                for itm in self.GetMenu.gBarItm(self.Data[1]):\r\n                    self.SetMenu.Table = u'mitem'\r\n                    self.SetMenu.Delitem(u\" mitem.itemid = %s \" % itm[1] )\r\n                    self.SetMenu.Table = u'extended'\r\n                    self.SetMenu.Delitem(u\" extended.extid = '%s' \" % itm[2])\r\n\r\n            mb.Remove(mb.FindMenu(self.Data[0]))\r\n\r\n        else:\r\n            event.Skip()\r\n\r\n        self.Action = True\r\n        q = self.GetParent()\r\n        q.Close()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DCC/MenuDev1.py b/DCC/MenuDev1.py
--- a/DCC/MenuDev1.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/DCC/MenuDev1.py	(date 1623737127714)
@@ -139,8 +139,20 @@
 
     def fillList(self):
         broot = self.TLCtrl1.GetRootItem()
-        roots = self.MyMenu.AllBar()
+        roots = self.MyMenu.AllBar("where mbarid < 9999")
+        def getSubmenu(itmid, chditm, titl):
+            subitems = self.MyMenu.ShowItem(itmid)
+            for sub in subitems:
+                subitm = self.TLCtrl1.AppendItem(chditm, titl)
+                self.TLCtrl1.SetItemText(subitm, 0, str(sub[1]))
+                if sub[6] == 'S':
+                    getSubmenu(sub[1], subitm, sub[3])
+                else:
+                    self.TLCtrl1.SetItemText(subitm, 1, sub[3])
+                    self.TLCtrl1.SetItemText(subitm, 2, sub[4])
+                self.TLCtrl1.SetItemText(subitm, 3, sub[5])
 
+            #return self.MyMenu.ShowItem(itmid)
         for r in roots:
             grp_roots = self.TLCtrl1.AppendItem(broot, 'Bar Menu')
             self.TLCtrl1.SetItemText(grp_roots, 0, str(r[0]))
@@ -149,10 +161,20 @@
             self.TLCtrl1.SetItemText(grp_roots, 3, r[3])
             items = self.MyMenu.ShowItem(r[0])
             # items = self.MyMenu.AmenuItm(r[0])
-            # print(items)
+            #print(items)
             for i in items:
                 chditm = self.TLCtrl1.AppendItem(grp_roots, 'Items Menu')
                 self.TLCtrl1.SetItemText(chditm, 0, str(i[1]))
+                if i[6] == 'S':
+                    #subitms  = getSubmenu(i[1])
+                    #print(subitms)
+                    getSubmenu(i[1], chditm, i[3])
+                    #for sub in subitms:
+                    #    subitm = self.TLCtrl1.AppendItem(chditm, i[3])
+                    #    self.TLCtrl1.SetItemText(subitm, 1, sub[3])
+                    #    self.TLCtrl1.SetItemText(subitm, 2, sub[4])
+                    #    self.TLCtrl1.SetItemText(subitm, 3, sub[5])
+
                 if i[3] == None or i[3] == '':
                     self.TLCtrl1.SetItemText(chditm, 1, '---')
                     self.TLCtrl1.SetItemText(chditm, 2, '---')
@@ -161,19 +183,21 @@
                     self.TLCtrl1.SetItemText(chditm, 2, str(i[4]))
                 self.TLCtrl1.SetItemText(chditm, 3, str(i[5]))
 
+
     def Additm( self, event ):
         ps = self.TLCtrl1.GetSelections()
         self.itmcod = self.TLCtrl1.GetItemText(ps[0], 0)
 
         itdd = self.MyMenu.getmItem(int(self.itmcod))
+        #print(itdd)
         if itdd == []:
-            itdd = [self.itmcod,[]]
+            itmdd = [self.itmcod,'','']
         else:
-            itdd = itdd[0]
-        #print(self.itmcod,itdd[0])
+            itmdd = [itdd[0][0],itdd[0][1],itdd[0][3]]
+        #print(self.itmcod,itdd[0],itdd[3])
         self.Frm = wx.Frame(self, style=wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)
-        self.Pnl = MF.MyPanel1(self.Frm,[itdd[0],itdd[1]],u'AddNew')
-        self.Frm.SetSize((700,360))
+        self.Pnl = MF.MyPanel1(self.Frm,itmdd,u'AddNew')
+        self.Frm.SetSize((720,360))
         self.Frm.Show()
         #event.Skip()
 
@@ -183,10 +207,10 @@
         self.itmcod = self.TLCtrl1.GetItemText(ps[0], 0)
 
         itdd = self.MyMenu.getmItem(int(self.itmcod))[0]
-        #print(itdd)
+        print(itdd)
         self.Frm = wx.Frame(self, style=wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)
         self.Pnl = MF.MyPanel1(self.Frm,itdd,'UpDate')
-        self.Frm.SetSize((700, 360))
+        self.Frm.SetSize((720, 360))
         self.Frm.Show()
         #event.Skip()
 
@@ -197,7 +221,7 @@
         itdd = self.MyMenu.getmItem(int(self.itmcod))[0]
         self.Frm = wx.Frame(self, style=wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)
         self.Pnl = MF.MyPanel1(self.Frm,itdd, 'Delete')
-        self.Frm.SetSize((700, 360))
+        self.Frm.SetSize((720, 360))
         self.Frm.Show()
         #event.Skip()
 
@@ -300,6 +324,7 @@
         wx.Panel.__init__ ( self, parent, id = id, pos = pos, size = size, style = style, name = name )
 
         self.Data = Data
+        self.Buttom = Buttom
         self.GetMenu = MS.GetData(u'Menu2.db',u'')
         self.SetMenu = MS.SetData(u'',u'',u'')
         self.Action = False
@@ -343,8 +368,9 @@
         self.fld3 = wx.TextCtrl(self, wx.ID_ANY, self.Data[2], wx.DefaultPosition, wx.Size(50, -1), 0)
         Hsz1.Add(self.fld3, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)
 
-        self.m_button24 = wx.Button(self, wx.ID_ANY, u"...", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT)
-        Hsz1.Add(self.m_button24, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)
+        self.atobtn = wx.Button(self, wx.ID_ANY, u"...", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT)
+        Hsz1.Add(self.atobtn, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)
+        self.atobtn.SetToolTip(u"Automatic code generate")
 
         Vsz1.Add(Hsz1, 0, wx.EXPAND, 5)
 
@@ -392,7 +418,7 @@
         self.Layout()
 
         # Connect Events
-        self.m_button24.Bind(wx.EVT_BUTTON, self.srchit)
+        self.atobtn.Bind( wx.EVT_BUTTON, self.atocod )
         self.dirct.Bind(wx.EVT_DIRPICKER_CHANGED, self.bardir)
         self.box1.Bind(wx.EVT_CHECKBOX, self.disbar)
         self.box2.Bind(wx.EVT_CHECKBOX, self.hidbar)
@@ -404,7 +430,22 @@
 
         # Virtual event handlers, overide them in your derived class
 
-    def srchit(self, event):
+    def atocod(self, event):
+        if self.Buttom == 'Create':
+            allbar = self.GetMenu.AllBar('where mbarid < 9999')
+            print(allbar)
+            if allbar != [] :
+                print(allbar[-1][0]+100)
+                alphabt = '_abcdefghijklmnopqrstuvwxyz'
+                lnumstr = str(allbar[-1][0]+100)[0]
+                rnumstr = str(allbar[-1][0]+100)[-1]
+                self.fld2.SetValue(str(allbar[-1][0]+100))
+                self.fld3.SetValue(lnumstr+rnumstr+alphabt[int(lnumstr)]+alphabt[int(rnumstr)])
+            else:
+
+                self.fld2.SetValue(str(101))
+                self.fld3.SetValue('11aa')
+
         event.Skip()
 
     def bardir(self, event):
@@ -436,7 +477,10 @@
 
     def doit(self, event):
         mw = self.FindWindowByName('main')
-        mb = mw.GetMenuBar()
+        if mw.GetMenuBar() != None:
+            mb = mw.GetMenuBar()
+        else:
+            mb = mw.NewMenu()
         if event.GetEventObject().GetLabel() == 'Create':
             data1 = self.fld1.GetValue()
             data2 = self.fld2.GetValue()
Index: DCC/MitemFrm2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n\r\n###########################################################################\r\n## Python code generated with wxFormBuilder (version Oct 26 2018)\r\n## http://www.wxformbuilder.org/\r\n##\r\n## PLEASE DO *NOT* EDIT THIS FILE!\r\n###########################################################################\r\n\r\nimport wx\r\nimport wx.xrc\r\n\r\nfrom AI.OpnFil import *\r\nfrom AI.Analiz import *\r\nfrom AI.Generats import *\r\n\r\nfrom Config.Init import *\r\n\r\nimport Database.MenuSet2 as MS\r\nimport GUI.proman as pro\r\nimport importlib\r\n\r\n###########################################################################\r\n## Class MyPanel2\r\n###########################################################################\r\n\r\nclass MyPanel1 ( wx.Panel ):\r\n\r\n    def __init__( self, parent, Data=[], Button=u'',id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 700,360 ), style = wx.TAB_TRAVERSAL, name = wx.EmptyString ):\r\n        wx.Panel.__init__ ( self, parent, id = id, pos = pos, size = size, style = style, name = name )\r\n\r\n        self.Data = Data\r\n        print(Data)\r\n        self.Button = Button\r\n        self.getMData = MS.GetData(u'Menu2.db', u'')\r\n        self.setMDate = MS.SetData(u'', u'', u'')\r\n\r\n        Vz1 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        self.SP1 = wx.SplitterWindow( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.SP_3D )\r\n        self.SP1.Bind( wx.EVT_IDLE, self.SP1OnIdle )\r\n\r\n        self.P1 = wx.Panel( self.SP1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.BORDER_RAISED|wx.TAB_TRAVERSAL )\r\n        Vzp1 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        Hzp1 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        if Data != []:\r\n            self.barname = self.getMData.gBarN(Data[0])[0][0]\r\n            self.C = self.barname[0]\r\n        else:\r\n            self.barname = u''\r\n            self.C = 'P'\r\n\r\n        self.title = wx.StaticText( self.P1, wx.ID_ANY, u\"Menu Bar: \"+ self.barname, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.title.Wrap( -1 )\r\n\r\n        Hzp1.Add( self.title, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.txt1a = wx.StaticText( self.P1, wx.ID_ANY, u\"ID\", wx.DefaultPosition, wx.Size( -1,-1 ), 0 )\r\n        self.txt1a.Wrap( -1 )\r\n\r\n        Hzp1.Add( self.txt1a, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld0 = wx.TextCtrl( self.P1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0 )\r\n        Hzp1.Add( self.fld0, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.txt1b = wx.StaticText( self.P1, wx.ID_ANY, u\"Access\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt1b.Wrap( -1 )\r\n\r\n        Hzp1.Add( self.txt1b, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld1 = wx.TextCtrl( self.P1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 40,-1 ), 0 )\r\n        Hzp1.Add( self.fld1, 0, wx.ALL, 5 )\r\n\r\n        self.btnsrc = wx.Button( self.P1, wx.ID_ANY, u\"...\", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT )\r\n        Hzp1.Add( self.btnsrc, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp1, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp2 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt2 = wx.StaticText( self.P1, wx.ID_ANY, u\"Label\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt2.Wrap( -1 )\r\n\r\n        Hzp2.Add( self.txt2, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld2 = wx.TextCtrl( self.P1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp2.Add( self.fld2, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp2, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp3 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt3 = wx.StaticText( self.P1, wx.ID_ANY, u\"Icon\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt3.Wrap( -1 )\r\n\r\n        Hzp3.Add( self.txt3, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld3 = wx.FilePickerCtrl( self.P1, wx.ID_ANY, wx.EmptyString, u\"Select a file\", u\"*.png;*.bmp;*.jpg\", wx.DefaultPosition, wx.DefaultSize, wx.FLP_DEFAULT_STYLE|wx.FLP_FILE_MUST_EXIST|wx.FLP_SMALL )\r\n        Hzp3.Add( self.fld3, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp3, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp31 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.icon = wx.StaticBitmap( self.P1, wx.ID_ANY, wx.Bitmap(ICONS_PATH + u\"image.png\", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp31.Add( self.icon, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp31, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        Hzp4 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt4 = wx.StaticText( self.P1, wx.ID_ANY, u\"Shorcut\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt4.Wrap( -1 )\r\n\r\n        Hzp4.Add( self.txt4, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld4 = wx.TextCtrl( self.P1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp4.Add( self.fld4, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp4, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp5 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt5 = wx.StaticText( self.P1, wx.ID_ANY, u\"Help String\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt5.Wrap( -1 )\r\n\r\n        Hzp5.Add( self.txt5, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld5 = wx.TextCtrl( self.P1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp5.Add( self.fld5, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp5, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp6 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt6 = wx.StaticText( self.P1, wx.ID_ANY, u\"Status\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt6.Wrap( -1 )\r\n\r\n        Hzp6.Add( self.txt6, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld6 = wx.TextCtrl( self.P1, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp6.Add( self.fld6, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp6, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp7 = wx.WrapSizer( wx.HORIZONTAL, wx.WRAPSIZER_DEFAULT_FLAGS )\r\n\r\n        self.txt7 = wx.StaticText( self.P1, wx.ID_ANY, u\"Type:\", wx.DefaultPosition, wx.Size( 50,-1 ), 0 )\r\n        self.txt7.Wrap( -1 )\r\n\r\n        Hzp7.Add( self.txt7, 0, wx.ALL, 5 )\r\n\r\n        self.rBtn1 = wx.RadioButton( self.P1, wx.ID_ANY, u\"Normal\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp7.Add( self.rBtn1, 0, wx.ALL, 5 )\r\n\r\n        self.rBtn2 = wx.RadioButton( self.P1, wx.ID_ANY, u\"Check\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp7.Add( self.rBtn2, 0, wx.ALL, 5 )\r\n\r\n        self.rBtn3 = wx.RadioButton( self.P1, wx.ID_ANY, u\"Radio\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp7.Add( self.rBtn3, 0, wx.ALL, 5 )\r\n\r\n        self.rBtn4 = wx.RadioButton( self.P1, wx.ID_ANY, u\"SubMenu\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp7.Add( self.rBtn4, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp7, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp71 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.cBox1 = wx.CheckBox( self.P1, wx.ID_ANY, u\"Disable\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp71.Add( self.cBox1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        self.cBox2 = wx.CheckBox( self.P1, wx.ID_ANY, u\"Hidden\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp71.Add( self.cBox2, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vzp1.Add( Hzp71, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n\r\n        self.P1.SetSizer( Vzp1 )\r\n        self.P1.Layout()\r\n        Vzp1.Fit( self.P1 )\r\n        self.P2 = wx.Panel( self.SP1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.BORDER_RAISED|wx.TAB_TRAVERSAL )\r\n        Vzp2 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        Hzp8 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt8 = wx.StaticText( self.P2, wx.ID_ANY, u\"Menu Bar Direction\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt8.Wrap( -1 )\r\n\r\n        Hzp8.Add( self.txt8, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.MbarDir = wx.TextCtrl( self.P2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.MbarDir.Enable( False )\r\n\r\n        Hzp8.Add( self.MbarDir, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp8, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp9 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt9 = wx.StaticText( self.P2, wx.ID_ANY, u\"Form Name\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt9.Wrap( -1 )\r\n\r\n        Hzp9.Add( self.txt9, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.file1 = wx.FilePickerCtrl( self.P2, wx.ID_ANY, wx.EmptyString, u\"Select a file\", u\"*.py\", wx.DefaultPosition, wx.DefaultSize, wx.FLP_DEFAULT_STYLE|wx.FLP_SMALL )\r\n        Hzp9.Add( self.file1, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp9, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp10 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.btn1 = wx.Button( self.P2, wx.ID_ANY, u\"Preview\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp10.Add( self.btn1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        self.btn2 = wx.Button( self.P2, wx.ID_ANY, u\"Open File\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp10.Add( self.btn2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        self.btn3 = wx.Button( self.P2, wx.ID_ANY, u\"New...\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp10.Add( self.btn3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp10, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp11 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.btn6 = wx.Button( self.P2, wx.ID_ANY, u\"Generate1\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp11.Add( self.btn6, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        self.txt10 = wx.StaticText( self.P2, wx.ID_ANY, u\"Program name\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt10.Wrap( -1 )\r\n\r\n        Hzp11.Add( self.txt10, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.Doprgitm = wx.TextCtrl( self.P2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp11.Add( self.Doprgitm, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp11, 0, wx.EXPAND, 5 )\r\n\r\n        Hzpl = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.line1 = wx.StaticLine( self.P2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.LI_HORIZONTAL )\r\n        Hzpl.Add( self.line1, 1, wx.EXPAND |wx.ALL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzpl, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp12 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt11 = wx.StaticText( self.P2, wx.ID_ANY, u\"Select Database\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt11.Wrap( -1 )\r\n\r\n        Hzp12.Add( self.txt11, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.dbfile = wx.FilePickerCtrl( self.P2, wx.ID_ANY, wx.EmptyString, u\"Select a Database File\", u\"*.db;*.sqlite;*.sqlite3;*.db3\\n\", wx.DefaultPosition, wx.DefaultSize, wx.FLP_DEFAULT_STYLE|wx.FLP_SMALL )\r\n        Hzp12.Add( self.dbfile, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp12, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp13 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt12 = wx.StaticText( self.P2, wx.ID_ANY, u\"Tabels and Fields\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt12.Wrap( -1 )\r\n\r\n        Hzp13.Add( self.txt12, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        Lbox1Choices = [ ]\r\n        self.Lbox1 = wx.ListBox( self.P2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, Lbox1Choices, wx.LB_ALWAYS_SB )\r\n        Hzp13.Add( self.Lbox1, 1, wx.ALL|wx.EXPAND, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp13, 0, wx.EXPAND, 5 )\r\n\r\n        Hzp14 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.btn9 = wx.Button( self.P2, wx.ID_ANY, u\"Generate2\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hzp14.Add( self.btn9, 0, wx.ALL, 5 )\r\n\r\n        #self.Fildlst = wx.ListCtrl( self.P2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.LC_AUTOARRANGE|wx.LC_NO_HEADER )\r\n        #Hzp14.Add( self.Fildlst, 1, wx.ALL, 5 )\r\n\r\n\r\n        Vzp2.Add( Hzp14, 1, wx.EXPAND, 5 )\r\n\r\n\r\n        self.P2.SetSizer( Vzp2 )\r\n        self.P2.Layout()\r\n        Vzp2.Fit( self.P2 )\r\n        self.SP1.SplitVertically( self.P1, self.P2, 349 )\r\n        Vz1.Add( self.SP1, 1, wx.EXPAND, 5 )\r\n\r\n        Hz1 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        self.btnA = wx.Button( self, wx.ID_ANY, u\"Apply\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hz1.Add( self.btnA, 0, wx.ALL, 5 )\r\n\r\n        self.btnS = wx.Button( self, wx.ID_ANY, u\"Save \", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hz1.Add( self.btnS, 0, wx.ALL, 5 )\r\n\r\n        self.btnR = wx.Button( self, wx.ID_ANY, u\"Report\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hz1.Add( self.btnR, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vz1.Add( Hz1, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        if self.Button == 'UpDate' or self.Button == 'Delete':\r\n            self.putData(self.Data)\r\n\r\n\r\n        self.SetSizer( Vz1 )\r\n        self.Layout()\r\n\r\n        # Connect Events\r\n        self.btnsrc.Bind( wx.EVT_BUTTON, self.lstid )\r\n        self.fld3.Bind( wx.EVT_FILEPICKER_CHANGED, self.shwicn )\r\n        self.rBtn1.Bind( wx.EVT_RADIOBUTTON, self.typitm )\r\n        self.rBtn2.Bind( wx.EVT_RADIOBUTTON, self.typitm )\r\n        self.rBtn3.Bind( wx.EVT_RADIOBUTTON, self.typitm )\r\n        self.rBtn4.Bind( wx.EVT_RADIOBUTTON, self.typitm )\r\n        self.cBox1.Bind( wx.EVT_CHECKBOX, self.disitm )\r\n        self.cBox2.Bind( wx.EVT_CHECKBOX, self.hiditm )\r\n        self.file1.Bind( wx.EVT_FILEPICKER_CHANGED, self.chngfil )\r\n        self.btn1.Bind( wx.EVT_BUTTON, self.prvw )\r\n        self.btn2.Bind( wx.EVT_BUTTON, self.opnfil )\r\n        self.btn3.Bind( wx.EVT_BUTTON, self.newfil )\r\n        self.btn6.Bind( wx.EVT_BUTTON, self.gnrt1 )\r\n        self.dbfile.Bind( wx.EVT_FILEPICKER_CHANGED, self.Dbfile )\r\n        self.Lbox1.Bind( wx.EVT_LISTBOX, self.tblfld )\r\n        self.Lbox1.Bind( wx.EVT_LISTBOX_DCLICK, self.dblclik )\r\n        self.btn9.Bind( wx.EVT_BUTTON, self.gnrt2 )\r\n        self.btnA.Bind( wx.EVT_BUTTON, self.Aply )\r\n        self.btnS.Bind( wx.EVT_BUTTON, self.Save )\r\n        self.btnR.Bind( wx.EVT_BUTTON, self.Rprt )\r\n\r\n    def __del__( self ):\r\n        pass\r\n\r\n\r\n    # Virtual event handlers, overide them in your derived class\r\n    def putData(self, Data):\r\n        #print(Data)\r\n        self.fld0.SetValue(str(Data[1]))\r\n        if self.Data[11] != None:\r\n            self.fld1.SetValue(Data[11])\r\n        if Data[2] == None:\r\n            self.fld2.SetValue(u'Separator')\r\n        else:\r\n            self.fld2.SetValue(Data[2])\r\n        if Data[8] != None:\r\n            self.fld3.SetPath(ICON16_PATH + Data[8])\r\n        if Data[9] != None:\r\n            self.fld4.SetValue(Data[9])\r\n        if Data[10] != None:\r\n            self.fld5.SetValue(Data[10])\r\n        if Data[7] != None:\r\n            self.fld6.SetValue(Data[7])\r\n        if Data[3] == 'N':\r\n            self.rBtn1.SetValue(True)\r\n        elif Data[3] == 'C':\r\n            self.rBtn2.SetValue(True)\r\n        elif Data[3] == 'R':\r\n            self.rBtn3.SetValue(True)\r\n        elif Data[3] == 'S':\r\n            self.rBtn4.SetValue(True)\r\n        else:\r\n            pass\r\n        if Data[16] != None and Data[16] != 1:\r\n            self.cBox1.SetValue(True)\r\n        if Data[15] != None and Data[15] == '0000':\r\n            self.cBox2.SetValue(True)\r\n\r\n        if Data[18] != '' and Data[18] != None:\r\n            self.Doprgitm.SetValue(Data[18])\r\n        Path = self.getMData.MnuDir(Data[1])[0][0]\r\n        self.MbarDir.SetValue(GUI_PATH + Path.replace('GUI.', ''))\r\n\r\n        if Data[19] != '' and Data[19] != None and Data[19] == '100':\r\n            #    self.file1.SetPath(GUI_PATH+'Temp\\\\'+Data[18]+'.py')\r\n            impy = Anlzfil(GUI_PATH+'Temp\\\\'+Data[18]+'.py')\r\n            impy.parsefil()\r\n        elif Data[19] != None and Data[19] != '100':\r\n            impy = Anlzfil(self.MbarDir.GetValue()+'\\\\'+Data[18]+'.py')\r\n            impy.parsefil()\r\n        else:\r\n            impy = Anlzfil(GUI_PATH+'Temp\\\\'+'buyit.py')\r\n            impy.parsefil()\r\n        #print(impy)\r\n        if impy.getGUIfil() != None:\r\n            ifil = impy.getGUIfil().replace('GUI.API.',GUI_PATH+'API\\\\')\r\n            self.file1.SetPath(ifil+'.py')\r\n\r\n\r\n        self.Update()\r\n\r\n    def lstid( self, event ):\r\n        event.Skip()\r\n\r\n    def shwicn( self, event ):\r\n        self.icon.SetBitmap(wx.Bitmap(self.fld3.GetPath(), wx.BITMAP_TYPE_ANY))\r\n        event.Skip()\r\n\r\n    def typitm( self, event ):\r\n        event.Skip()\r\n\r\n\r\n\r\n\r\n    def disitm( self, event ):\r\n        event.Skip()\r\n\r\n    def hiditm( self, event ):\r\n        event.Skip()\r\n\r\n    def chngfil( self, event ):\r\n        #ifile = self.file1.GetPath()\r\n        #self.Doprgitm.SetValue(ifile.replace(GUI_PATH, '')[:-3].replace('\\\\', '.'))\r\n        event.Skip()\r\n\r\n    def prvw( self, event ):\r\n        a = self.file1.GetPath().replace(GUI_PATH,'GUI.')\r\n        a1 = a.replace('\\\\','.')\r\n        a2 = a1.replace('.py','')\r\n\r\n        try:\r\n            m = importlib.import_module(a2)\r\n            self.Frm = wx.Frame(self, -1, pos=wx.DefaultPosition, size=wx.DefaultSize)\r\n            self.pnl = m.MyPanel1(self.Frm)\r\n            self.Frm.Show()\r\n        except ImportError as error:\r\n            print(error)\r\n        event.Skip()\r\n\r\n    def opnfil( self, event ):\r\n        self.Frm = wx.Frame(self, style=wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)\r\n        self.Pnl = PyPanel(self.Frm, self.file1.GetPath())\r\n        self.Frm.SetSize((700, 560))\r\n        self.Frm.Show()\r\n        event.Skip()\r\n\r\n    def newfil( self, event ):\r\n        self.Frm = wx.Frame(self, style=wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)\r\n        self.Pnl = PyPanel(self.Frm, GUI_PATH+'Temp\\\\untitle.py' )\r\n        self.Frm.SetSize((700, 560))\r\n        self.Frm.Show()\r\n        event.Skip()\r\n\r\n    def gnrt1( self, event ):\r\n        if self.Doprgitm.GetValue() == u'buyit':\r\n            if self.file1.GetPath()[-7:] == u'Pnl0.py':\r\n                wx.MessageBox(u'No Change any thing !')\r\n            else:\r\n                wx.MessageBox(u\"Please change name of program we can not write over this file!\")\r\n        else:\r\n            myfil = self.MbarDir.GetValue()+ '\\\\' + self.Doprgitm.GetValue() + u'.py'\r\n            #print(myfil)\r\n            G = Genrate(myfil)\r\n            G.createFrm(self.file1.GetPath())\r\n            d1 = int(str(self.Data[0])[0]+str(self.Data[1])[-3:]+str(self.Data[0])[-1])\r\n            d2 = self.Doprgitm.GetValue()\r\n            d3 = str(self.Data[0])\r\n            d4 = u'-1'\r\n            d5 = -1\r\n\r\n            self.setMDate.Table = u'handler'\r\n            self.setMDate.Additem(u\"handlerid, prgname, prgdir, paramtr, public\",[d1,d2,d3,d4,d5] )\r\n            wx.MessageBox(u\"successful Generate . Please press [apply] button\")\r\n\r\n        event.Skip()\r\n\r\n    def Dbfile( self, event ):\r\n        event.Skip()\r\n\r\n    def tblfld( self, event ):\r\n        event.Skip()\r\n\r\n    def dblclik( self, event ):\r\n        event.Skip()\r\n\r\n    def gnrt2( self, event ):\r\n        event.Skip()\r\n\r\n    def Aply( self, event ):\r\n        D = self.getfild()\r\n        # print(D)\r\n        # print(self.Data)\r\n        extid = D[0][0] + D[0][-1] + D[7] + self.C + D[2][0] + D[0][1:]\r\n        if self.Doprgitm.GetValue() == '':\r\n            hndid = 10001\r\n        else:\r\n            hndid = self.getHandel(self.Doprgitm.GetValue(), self.file1.GetPath())\r\n        #print(hndid)\r\n        Dsri1 = [self.Data[0], int(D[0]), D[2], D[7], extid, hndid]\r\n        Dsri2 = [extid, D[6], D[3].replace(ICON16_PATH, ''), D[4], D[5], D[1], 1]\r\n        if D[8]:\r\n            dn = 0\r\n        else:\r\n            dn = 1\r\n        if D[9]:\r\n            sh = '0000'\r\n        else:\r\n            sh = 'FFFF'\r\n        Dsri3 = [D[1], 1, sh, dn]\r\n        # print(self.Data)\r\n        # print(Dsri1)\r\n        self.setMDate.Table = u'mitem'\r\n        if self.Button == 'AddNew':\r\n            self.setMDate.Additem(u'mbarid, itemid, itemname, itemtyp, extid, handlerid ', Dsri1)\r\n        elif self.Button == 'UpDate':\r\n            self.setMDate.Upditem(u'itemname = ?, itemtyp = ? , handlerid = ?  where itemid = %d' % self.Data[1],\r\n                                  [D[2], D[7], hndid])\r\n            # print('write it')\r\n        elif self.Button == 'Delete':\r\n            self.setMDate.Delitem(u'mitem.itemid = %d' % self.Data[1])\r\n\r\n        self.setMDate.Table = u'extended'\r\n        if self.Button == 'AddNew':\r\n            self.setMDate.Additem(u'extid, status, icon, shortcut, help, acclvlid, grpid', Dsri2)\r\n        elif self.Button == 'UpDate':\r\n            self.setMDate.Upditem(u'status = ?, icon = ?, shortcut = ? , help = ?  where extid = \"%s\" ' % self.Data[4],\r\n                                  [D[6], D[3].replace(ICON16_PATH, ''), D[4], D[5]])\r\n            # print('write it')\r\n        elif self.Button == 'Delete':\r\n            self.setMDate.Delitem(u'extended.extid = \"%s\"' % self.Data[4])\r\n\r\n        self.setMDate.Table = u'access'\r\n        if self.Button == 'AddNew':\r\n            self.setMDate.Additem(u'acclvlid, userid, acclvl, disenable', Dsri3)\r\n            self.Add2Menu(D)\r\n        elif self.Button == 'UpDate':\r\n            self.setMDate.Upditem(u'acclvl = ? , disenable = ?  where acclvlid = \"%s\" ' % self.Data[11], [sh, dn])\r\n            self.ChngMnu(D)\r\n            # print('write it')\r\n        elif self.Button == 'Delete':\r\n            self.setMDate.Delitem(u'access.acclvlid = \"%s\"' % self.Data[11])\r\n            self.delmenu()\r\n\r\n        wx.MessageBox(u'request apply, you can change or add program later. ')\r\n\r\n        # self.Add2Menu(D)\r\n\r\n        ml = self.GetGrandParent()\r\n        ml.TLCtrl1.DeleteAllItems()\r\n        ml.fillList()\r\n        ml.Refresh()\r\n        # print(dir(self.GetGrandParent()))\r\n        q = self.GetParent()\r\n        q.Close()\r\n        event.Skip()\r\n\r\n    def Add2Menu(self, D):\r\n        mw = self.FindWindowByName('main')\r\n        mb = mw.GetMenuBar()\r\n        lmb = mb.GetMenus()\r\n        for l in lmb:\r\n            if self.barname in l:\r\n                mbc = l[0]\r\n                if D[7] == 'S':\r\n                    mbc.AppendSubMenu(wx.Menu(), D[2], D[5])\r\n                    break\r\n                if D[7] == 'C':\r\n                    mtyp = wx.ITEM_CHECK\r\n                elif D[7] == 'R':\r\n                    mtyp = wx.ITEM_RADIO\r\n                else:\r\n                    mtyp = wx.ITEM_NORMAL\r\n                if D[4] != None or D[4] != '':\r\n                    nm = D[2] + '\\t' + D[4]\r\n                else:\r\n                    nm = D[2]\r\n                mbc.Append(int(D[0]), nm, D[5], mtyp)\r\n                if D[3] != '':\r\n                    mbcitm = mbc.FindItemById(int(D[0]))\r\n                    mbcitm.SetBitmap(wx.Bitmap(D[3], wx.BITMAP_TYPE_ANY))\r\n\r\n    def ChngMnu(self, D):\r\n        mw = self.FindWindowByName('main')\r\n        mb = mw.GetMenuBar()\r\n        lmb = mb.GetMenus()\r\n        for l in lmb:\r\n            if self.barname in l:\r\n                mbc = l[0]\r\n                itmchg = mbc.FindItemById(self.Data[1])\r\n                #print(D)\r\n                #print(dir(itmchg))\r\n                if D[7] == 'S':\r\n                    itmchg.SetSubMenu(wx.Menu(),D[2])\r\n                if D[4] != '':\r\n                    lbl = D[2] + '\\t' + D[4]\r\n                else:\r\n                    lbl = D[2]\r\n                itmchg.SetItemLabel(lbl)\r\n                if D[3] != '':\r\n                    itmchg.SetBitmap(wx.Bitmap(D[3], wx.BITMAP_TYPE_ANY))\r\n                if D[6] != '':\r\n                    itmchg.SetHelp(D[6])\r\n                itmchg.Enable(not D[8])\r\n\r\n    def delmenu(self):\r\n        mw = self.FindWindowByName('main')\r\n        mb = mw.GetMenuBar()\r\n        lmb = mb.GetMenus()\r\n        for l in lmb:\r\n            #print(l)\r\n            if self.barname in l:\r\n                itms = l[0].GetMenuItems()\r\n                #print(dir(itms[-1]))\r\n                for i in itms:\r\n                    print(i.GetId())\r\n                    if i.IsSeparator() and self.Data[2] == u'Separator':\r\n\r\n                        i.Destroy()\r\n\r\n                    elif i.GetId() == self.Data[1]:\r\n                        l[0].RemoveItem(self.Data[1])\r\n                    else:\r\n                        print(i)\r\n\r\n    def getHandel(self, imodel, pathfile):\r\n        print(imodel,pathfile)\r\n        pr = self.getMData.AllHndl()\r\n        #m = imodel.split('.')[1]\r\n        for p in pr:\r\n            if imodel in p:\r\n                return p[0]\r\n        return 10001\r\n\r\n    def Save( self, event ):\r\n        event.Skip()\r\n\r\n    def Rprt( self, event ):\r\n        event.Skip()\r\n\r\n    def SP1OnIdle( self, event ):\r\n        self.SP1.SetSashPosition( 349 )\r\n        self.SP1.Unbind( wx.EVT_IDLE )\r\n\r\n    def getfild(self):\r\n        Data0 = self.fld0.GetValue()\r\n        Data1 = self.fld1.GetValue()\r\n        Data2 = self.fld2.GetValue()\r\n        Data3 = self.fld3.GetPath()\r\n        Data4 = self.fld4.GetValue()\r\n        Data5 = self.fld5.GetValue()\r\n        Data6 = self.fld6.GetValue()\r\n        if self.rBtn1.GetValue():\r\n            Data7 = 'N'\r\n        elif self.rBtn2.GetValue():\r\n            Data7 = 'C'\r\n        elif self.rBtn3.GetValue():\r\n            Data7 = 'R'\r\n        elif self.rBtn4.GetValue():\r\n            Data7 = 'S'\r\n        else:\r\n            Data7 = ''\r\n        Data8 = self.cBox1.GetValue()\r\n        Data9 = self.cBox2.GetValue()\r\n        return [Data0, Data1, Data2, Data3, Data4, Data5, Data6, Data7, Data8, Data9]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DCC/MitemFrm2.py b/DCC/MitemFrm2.py
--- a/DCC/MitemFrm2.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/DCC/MitemFrm2.py	(date 1623740198571)
@@ -17,6 +17,7 @@
 from Config.Init import *
 
 import Database.MenuSet2 as MS
+import Database.PostGet as PG
 import GUI.proman as pro
 import importlib
 
@@ -45,9 +46,12 @@
 
         Hzp1 = wx.WrapSizer( wx.HORIZONTAL, 0 )
 
-        if Data != []:
+        if Data != [] and Data[2] != 'S':
             self.barname = self.getMData.gBarN(Data[0])[0][0]
             self.C = self.barname[0]
+        elif Data[2] == 'S':
+            self.barname = self.getMData.gItem(Data[0], 'and mitem.itemid = %d'%Data[1])[0][0]
+            self.C = 'S'
         else:
             self.barname = u''
             self.C = 'P'
@@ -74,6 +78,7 @@
         Hzp1.Add( self.fld1, 0, wx.ALL, 5 )
 
         self.btnsrc = wx.Button( self.P1, wx.ID_ANY, u"...", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT )
+        self.btnsrc.SetToolTip(u"Automatic code generate")
         Hzp1.Add( self.btnsrc, 0, wx.ALL, 5 )
 
 
@@ -231,6 +236,10 @@
         self.btn3 = wx.Button( self.P2, wx.ID_ANY, u"New...", wx.DefaultPosition, wx.DefaultSize, 0 )
         Hzp10.Add( self.btn3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )
 
+        self.btn4 = wx.Button(self.P2, wx.ID_ANY, u"...", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT)
+        self.btn4.SetToolTip(u"Add program from List")
+        Hzp10.Add(self.btn4, 0, wx.ALL, 5)
+
 
         Vzp2.Add( Hzp10, 0, wx.EXPAND, 5 )
 
@@ -282,6 +291,9 @@
         self.Lbox1 = wx.ListBox( self.P2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, Lbox1Choices, wx.LB_ALWAYS_SB )
         Hzp13.Add( self.Lbox1, 1, wx.ALL|wx.EXPAND, 5 )
 
+        self.Lfeld = wx.TextCtrl(self.P2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize,  wx.TE_MULTILINE)
+        Hzp13.Add(self.Lfeld, 0, wx.ALL|wx.EXPAND, 5 )
+
 
         Vzp2.Add( Hzp13, 0, wx.EXPAND, 5 )
 
@@ -290,6 +302,16 @@
         self.btn9 = wx.Button( self.P2, wx.ID_ANY, u"Generate2", wx.DefaultPosition, wx.DefaultSize, 0 )
         Hzp14.Add( self.btn9, 0, wx.ALL, 5 )
 
+        self.btn10 = wx.Button(self.P2, wx.ID_ANY, u"Set Data", wx.DefaultPosition, wx.DefaultSize, 0)
+        Hzp14.Add(self.btn10, 0, wx.ALL, 5)
+
+        self.btn11 = wx.Button(self.P2, wx.ID_ANY, u"Get Data", wx.DefaultPosition, wx.DefaultSize, 0)
+        Hzp14.Add(self.btn11, 0, wx.TOP | wx.BOTTOM | wx.LEFT, 5)
+
+        self.btn12 = wx.Button(self.P2, wx.ID_ANY, u"...", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT)
+        self.btn12.SetToolTip(u"Add Data from Database")
+        Hzp14.Add(self.btn12, 0, wx.ALL, 5)
+
         #self.Fildlst = wx.ListCtrl( self.P2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.LC_AUTOARRANGE|wx.LC_NO_HEADER )
         #Hzp14.Add( self.Fildlst, 1, wx.ALL, 5 )
 
@@ -337,11 +359,15 @@
         self.btn1.Bind( wx.EVT_BUTTON, self.prvw )
         self.btn2.Bind( wx.EVT_BUTTON, self.opnfil )
         self.btn3.Bind( wx.EVT_BUTTON, self.newfil )
+        self.btn4.Bind(wx.EVT_BUTTON, self.Prolst)
         self.btn6.Bind( wx.EVT_BUTTON, self.gnrt1 )
         self.dbfile.Bind( wx.EVT_FILEPICKER_CHANGED, self.Dbfile )
         self.Lbox1.Bind( wx.EVT_LISTBOX, self.tblfld )
         self.Lbox1.Bind( wx.EVT_LISTBOX_DCLICK, self.dblclik )
         self.btn9.Bind( wx.EVT_BUTTON, self.gnrt2 )
+        self.btn10.Bind(wx.EVT_BUTTON, self.SetD)
+        self.btn11.Bind(wx.EVT_BUTTON, self.GetD)
+        self.btn12.Bind(wx.EVT_BUTTON, self.AtoD)
         self.btnA.Bind( wx.EVT_BUTTON, self.Aply )
         self.btnS.Bind( wx.EVT_BUTTON, self.Save )
         self.btnR.Bind( wx.EVT_BUTTON, self.Rprt )
@@ -407,6 +433,18 @@
         self.Update()
 
     def lstid( self, event ):
+        if self.Button == 'AddNew':
+            britm = self.getMData.gBarItm(int(self.Data[0]))
+            if britm != []:
+                print(britm[-1][1]+1)
+                self.fld0.SetValue(str(britm[-1][1]+1))
+                self.fld1.SetValue(str(britm[-1][1]+1)[0]+str(britm[-1][1]+1)[-2:]+self.barname[0].lower()+self.C.lower())
+            else:
+                print(britm)
+                print(self.Data)
+                self.fld0.SetValue(self.Data[0]+'1')
+                self.fld1.SetValue(self.Data[0][0]+'1'+self.Data[0][-1]+self.barname[0].lower()+self.C.lower())
+
         event.Skip()
 
     def shwicn( self, event ):
@@ -417,8 +455,6 @@
         event.Skip()
 
 
-
-
     def disitm( self, event ):
         event.Skip()
 
@@ -441,6 +477,7 @@
             self.pnl = m.MyPanel1(self.Frm)
             self.Frm.Show()
         except ImportError as error:
+            wx.MessageBox(error)
             print(error)
         event.Skip()
 
@@ -457,6 +494,9 @@
         self.Frm.SetSize((700, 560))
         self.Frm.Show()
         event.Skip()
+
+    def Prolst(self, event):
+        event.Skip()
 
     def gnrt1( self, event ):
         if self.Doprgitm.GetValue() == u'buyit':
@@ -482,9 +522,28 @@
         event.Skip()
 
     def Dbfile( self, event ):
+        dbfil = self.dbfile.GetPath().split('\\')[-1]
+        #print(dbfil)
+        idbfl = PG.Get(dbfil,u'',u'DBFields')
+        #print(idbfl.GetFromDbf())
+        tablfld = idbfl.GetFromDbf()
+        tblst = []
+        self.fldlst = {}
+        for tbl in tablfld:
+            tblst.append(tbl[1])
+            self.fldlst[tbl[2]] = tbl[4].split('(')[-1].rstrip(')').replace('\t','').replace('\n','')
+        #print(tblst,self.fldlst)
+        self.Lbox1.SetItems(tblst)
+        #print(self.fldlst.values())
+
         event.Skip()
 
     def tblfld( self, event ):
+        tbl = self.Lbox1.GetStringSelection()
+        #print(self.fldlst)
+        flds = self.fldlst[tbl].replace(',', '\n')
+
+        self.Lfeld.SetValue(flds)
         event.Skip()
 
     def dblclik( self, event ):
@@ -493,17 +552,30 @@
     def gnrt2( self, event ):
         event.Skip()
 
+    def SetD(self, event):
+        event.Skip()
+
+    def GetD(self, event):
+        event.Skip()
+
+    def AtoD(self, event):
+        event.Skip()
+
     def Aply( self, event ):
         D = self.getfild()
-        # print(D)
-        # print(self.Data)
+        #print(D)
+        #print(self.Data)
         extid = D[0][0] + D[0][-1] + D[7] + self.C + D[2][0] + D[0][1:]
         if self.Doprgitm.GetValue() == '':
             hndid = 10001
         else:
             hndid = self.getHandel(self.Doprgitm.GetValue(), self.file1.GetPath())
         #print(hndid)
-        Dsri1 = [self.Data[0], int(D[0]), D[2], D[7], extid, hndid]
+        if self.Data[2] == 'S':
+            BrM = self.Data[1]
+        else:
+            BrM = self.Data[0]
+        Dsri1 = [BrM, int(D[0]), D[2], D[7], extid, hndid]
         Dsri2 = [extid, D[6], D[3].replace(ICON16_PATH, ''), D[4], D[5], D[1], 1]
         if D[8]:
             dn = 0
@@ -619,7 +691,7 @@
                 itms = l[0].GetMenuItems()
                 #print(dir(itms[-1]))
                 for i in itms:
-                    print(i.GetId())
+                    #print(i.GetId())
                     if i.IsSeparator() and self.Data[2] == u'Separator':
 
                         i.Destroy()
@@ -630,7 +702,7 @@
                         print(i)
 
     def getHandel(self, imodel, pathfile):
-        print(imodel,pathfile)
+        #print(imodel,pathfile)
         pr = self.getMData.AllHndl()
         #m = imodel.split('.')[1]
         for p in pr:
Index: DCC/ProgDev1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n\r\n###########################################################################\r\n## Python code generated with wxFormBuilder (version Oct 26 2018)\r\n## http://www.wxformbuilder.org/\r\n##\r\n## PLEASE DO *NOT* EDIT THIS FILE!\r\n###########################################################################\r\n\r\nimport wx\r\nimport wx.xrc\r\n\r\nimport importlib\r\n\r\nimport Database.MenuSet2 as MS\r\nimport AI.Analiz as AZ\r\n\r\nfrom Config.Init import *\r\n\r\n###########################################################################\r\n## Class MyPanel1\r\n###########################################################################\r\n\r\nclass MyPanel1 ( wx.Panel ):\r\n\r\n    def __init__( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 500,400 ), style = wx.TAB_TRAVERSAL, name = wx.EmptyString ):\r\n        wx.Panel.__init__ ( self, parent, id = id, pos = pos, size = size, style = style, name = name )\r\n\r\n        Vsz1 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        Hsz1 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        GetData = MS.GetData(u'Menu2.db',u'')\r\n        mjoin = \"\"\" left join mitem on handler.handlerid = mitem.handlerid \\\r\n                    left join menubar on mitem.mbarid = menubar.mbarid \"\"\"\r\n        self.mylist = GetData.AllHndl(ext= mjoin + \" where handler.handlerid < 99000 \")\r\n        print(self.mylist)\r\n\r\n        self.Title = wx.StaticText( self, wx.ID_ANY, u\"List of Program in Application \", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.Title.Wrap( -1 )\r\n\r\n        Hsz1.Add( self.Title, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz1, 0, wx.EXPAND, 5 )\r\n\r\n        Hsz2 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        Vsz2 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        LPro1Choices = [i[1] for i in self.mylist ]\r\n        self.LPro1 = wx.ListBox( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, LPro1Choices, wx.LB_ALWAYS_SB )\r\n        Vsz2.Add( self.LPro1, 1, wx.ALL, 5 )\r\n\r\n\r\n        Hsz2.Add( Vsz2, 1, wx.EXPAND, 5 )\r\n\r\n        Vsz3 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        Hsz10 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        self.txt1 = wx.StaticText( self, wx.ID_ANY, u\"Id No.\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt1.Wrap( -1 )\r\n\r\n        Hsz10.Add( self.txt1, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld1 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz10.Add( self.fld1, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.txt2 = wx.StaticText( self, wx.ID_ANY, u\"Prog. No.\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt2.Wrap( -1 )\r\n\r\n        Hsz10.Add( self.txt2, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld2 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz10.Add( self.fld2, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vsz3.Add( Hsz10, 0, wx.EXPAND, 5 )\r\n\r\n        Hsz11 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        self.txt3 = wx.StaticText( self, wx.ID_ANY, u\"Do name\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt3.Wrap( -1 )\r\n\r\n        Hsz11.Add( self.txt3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld3 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz11.Add( self.fld3, 1, wx.ALIGN_CENTER_VERTICAL|wx.TOP|wx.BOTTOM|wx.LEFT, 5 )\r\n\r\n        self.prw = wx.Button( self, wx.ID_ANY, u\"...\", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT )\r\n        self.prw.SetToolTip( u\"Preview\" )\r\n\r\n        Hsz11.Add( self.prw, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vsz3.Add( Hsz11, 0, wx.EXPAND, 5 )\r\n\r\n        Hsz12 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        self.txt4 = wx.StaticText( self, wx.ID_ANY, u\"Directory\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt4.Wrap( -1 )\r\n\r\n        Hsz12.Add( self.txt4, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fdir = wx.DirPickerCtrl( self, wx.ID_ANY, wx.EmptyString, u\"Select a folder\", wx.DefaultPosition, wx.DefaultSize, wx.DIRP_DEFAULT_STYLE|wx.DIRP_SMALL )\r\n        self.fdir.SetToolTip( u\"Browse\" )\r\n\r\n        Hsz12.Add( self.fdir, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vsz3.Add( Hsz12, 0, wx.EXPAND, 5 )\r\n\r\n        Hsz13 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        self.txt5 = wx.StaticText( self, wx.ID_ANY, u\"Parameters\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt5.Wrap( -1 )\r\n\r\n        Hsz13.Add( self.txt5, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld5 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz13.Add( self.fld5, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vsz3.Add( Hsz13, 0, wx.EXPAND, 5 )\r\n\r\n        Hsz14 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        self.box1 = wx.CheckBox( self, wx.ID_ANY, u\"Public it\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz14.Add( self.box1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.txt6 = wx.StaticText( self, wx.ID_ANY, u\"Link:\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt6.Wrap( -1 )\r\n\r\n        Hsz14.Add( self.txt6, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld6 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz14.Add( self.fld6, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vsz3.Add( Hsz14, 0, wx.EXPAND, 5 )\r\n\r\n        Hsz15 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        self.btn1 = wx.Button( self, wx.ID_ANY, u\"Open Edit\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz15.Add( self.btn1, 0, wx.ALL, 5 )\r\n\r\n        self.btn2 = wx.Button( self, wx.ID_ANY, u\"Add New\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz15.Add( self.btn2, 0, wx.ALL, 5 )\r\n\r\n        self.btn3 = wx.Button( self, wx.ID_ANY, u\"Delete\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz15.Add( self.btn3, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vsz3.Add( Hsz15, 0, wx.EXPAND, 5 )\r\n\r\n\r\n        Hsz2.Add( Vsz3, 1, wx.EXPAND, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz2, 1, wx.EXPAND, 5 )\r\n\r\n        Vsz4 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        self.lin1 = wx.StaticLine( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.LI_HORIZONTAL )\r\n        Vsz4.Add( self.lin1, 0, wx.EXPAND |wx.ALL, 5 )\r\n\r\n\r\n        Vsz1.Add( Vsz4, 0, wx.EXPAND, 5 )\r\n\r\n        Hsz3 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        self.btn4 = wx.Button( self, wx.ID_ANY, u\"Open\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.btn4.SetToolTip( u\"Open Database\" )\r\n\r\n        Hsz3.Add( self.btn4, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.btn5 = wx.Button( self, wx.ID_ANY, u\"New\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.btn5.SetToolTip( u\"New Database\" )\r\n\r\n        Hsz3.Add( self.btn5, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.txt7 = wx.StaticText( self, wx.ID_ANY, u\"Tabels Used\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt7.Wrap( -1 )\r\n\r\n        Hsz3.Add( self.txt7, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.tbls = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz3.Add( self.tbls, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz3, 0, wx.EXPAND, 5 )\r\n\r\n        Hsz4 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        self.txt8 = wx.StaticText( self, wx.ID_ANY, u\"List Fields use\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt8.Wrap( -1 )\r\n\r\n        Hsz4.Add( self.txt8, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.lflds = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz4.Add( self.lflds, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz4, 0, wx.EXPAND, 5 )\r\n\r\n        Hsz5 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        self.txt9 = wx.StaticText( self, wx.ID_ANY, u\"action type\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt9.Wrap( -1 )\r\n\r\n        Hsz5.Add( self.txt9, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        actypChoices = []\r\n        self.actyp = wx.Choice( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, actypChoices, 0 )\r\n        self.actyp.SetSelection( 0 )\r\n        Hsz5.Add( self.actyp, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Hsz5.Add( ( 0, 0), 1, wx.EXPAND, 5 )\r\n\r\n        self.btn6 = wx.Button( self, wx.ID_ANY, u\"Setting...\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz5.Add( self.btn6, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz5, 0, wx.EXPAND, 5 )\r\n\r\n        Hsz6 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n\r\n        Hsz6.Add( ( 0, 0), 1, wx.EXPAND, 5 )\r\n\r\n        self.btn7 = wx.Button( self, wx.ID_ANY, u\"Cancel\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz6.Add( self.btn7, 0, wx.ALL, 5 )\r\n\r\n        self.btn8 = wx.Button( self, wx.ID_ANY, u\"Apply\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz6.Add( self.btn8, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz6, 0, wx.EXPAND, 5 )\r\n\r\n\r\n        self.SetSizer( Vsz1 )\r\n        self.Layout()\r\n\r\n        # Connect Events\r\n        self.LPro1.Bind( wx.EVT_LISTBOX, self.lstkt )\r\n        self.LPro1.Bind( wx.EVT_LISTBOX_DCLICK, self.chkit )\r\n        self.prw.Bind( wx.EVT_BUTTON, self.proprw )\r\n        self.fdir.Bind( wx.EVT_DIRPICKER_CHANGED, self.chgdir )\r\n        self.box1.Bind( wx.EVT_CHECKBOX, self.poblic )\r\n        self.btn1.Bind( wx.EVT_BUTTON, self.opnedit )\r\n        self.btn2.Bind( wx.EVT_BUTTON, self.addnew )\r\n        self.btn3.Bind( wx.EVT_BUTTON, self.delpro )\r\n        self.btn4.Bind( wx.EVT_BUTTON, self.opndata )\r\n        self.btn5.Bind( wx.EVT_BUTTON, self.newdata )\r\n        self.actyp.Bind( wx.EVT_CHOICE, self.chstyp )\r\n        self.btn6.Bind( wx.EVT_BUTTON, self.sting )\r\n        self.btn7.Bind( wx.EVT_BUTTON, self.cancl )\r\n        self.btn8.Bind( wx.EVT_BUTTON, self.aply )\r\n\r\n    def __del__( self ):\r\n        pass\r\n\r\n\r\n    # Virtual event handlers, overide them in your derived class\r\n    def lstkt( self, event ):\r\n        iprog = event.GetEventObject().GetStringSelection()\r\n        for lpro in self.mylist:\r\n            if lpro[1] == self.LPro1.GetStringSelection():\r\n                #print(lpro)\r\n                fl = self.analiz(iprog,lpro[13])\r\n                #print(fl)\r\n                if lpro[12] != None:\r\n                    pth = GUI_PATH+lpro[13]\r\n                else:\r\n                    pth = ''\r\n                Data = [str(lpro[0]),lpro[2],fl,pth,lpro[3],'']\r\n                self.fillfld(Data)\r\n        event.Skip()\r\n\r\n    def chkit( self, event ):\r\n        event.Skip()\r\n\r\n    def fillfld(self, D):\r\n        self.fld1.SetValue(D[0])\r\n        self.fld2.SetValue(D[1])\r\n        self.fld3.SetValue(D[2])\r\n        self.fdir.SetPath(D[3])\r\n        self.fld5.SetValue(D[4])\r\n        self.fld6.SetValue(D[5])\r\n        if D[5] != '':\r\n            self.box1.SetValue(1)\r\n\r\n    def proprw( self, event ):\r\n        a2 = self.fld3.GetValue()\r\n        if a2 != '':\r\n            try:\r\n                m = importlib.import_module(a2)\r\n                self.Frm = wx.Frame(self, -1, pos=wx.DefaultPosition, size=wx.DefaultSize)\r\n                self.pnl = m.MyPanel1(self.Frm)\r\n                self.Frm.Show()\r\n            except ImportError as error:\r\n                print(error)\r\n        event.Skip()\r\n\r\n    def chgdir( self, event ):\r\n        event.Skip()\r\n\r\n    def poblic( self, event ):\r\n        event.Skip()\r\n\r\n    def opnedit( self, event ):\r\n        event.Skip()\r\n\r\n    def addnew( self, event ):\r\n        event.Skip()\r\n\r\n    def delpro( self, event ):\r\n        event.Skip()\r\n\r\n    def opndata( self, event ):\r\n        event.Skip()\r\n\r\n    def newdata( self, event ):\r\n        event.Skip()\r\n\r\n    def chstyp( self, event ):\r\n        event.Skip()\r\n\r\n    def sting( self, event ):\r\n        event.Skip()\r\n\r\n    def cancl( self, event ):\r\n        q = self.GetParent()\r\n        q.Close()\r\n\r\n    def aply( self, event ):\r\n        q = self.GetParent()\r\n        q.Close()\r\n\r\n\r\n    def analiz(self, file, path):\r\n        if path == None:\r\n            return ''\r\n        else:\r\n            impfil = AZ.Anlzfil(GUI_PATH+path+'\\\\'+file+'.py')\r\n            impfil.parsefil()\r\n            for imp in impfil.imprts:\r\n                if 'GUI' in imp:\r\n                    return imp.split(' ')[1]\r\n            else:\r\n                return ''\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DCC/ProgDev1.py b/DCC/ProgDev1.py
--- a/DCC/ProgDev1.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/DCC/ProgDev1.py	(date 1624482595238)
@@ -30,11 +30,13 @@
 
         Hsz1 = wx.BoxSizer( wx.HORIZONTAL )
 
-        GetData = MS.GetData(u'Menu2.db',u'')
-        mjoin = """ left join mitem on handler.handlerid = mitem.handlerid \
-                    left join menubar on mitem.mbarid = menubar.mbarid """
-        self.mylist = GetData.AllHndl(ext= mjoin + " where handler.handlerid < 99000 ")
-        print(self.mylist)
+        self.GetData = MS.GetData(u'Menu2.db',u'')
+
+        #mjoin = """ left join mitem on handler.handlerid = mitem.handlerid \
+        #            left join menubar on mitem.mbarid = menubar.mbarid """
+        self.mylist = self._meklst()
+        #self.mylist = GetData.AllHndl(ext= mjoin + " where handler.handlerid < 99000 ")
+        #print(self.mylist)
 
         self.Title = wx.StaticText( self, wx.ID_ANY, u"List of Program in Application ", wx.DefaultPosition, wx.DefaultSize, 0 )
         self.Title.Wrap( -1 )
@@ -262,21 +264,35 @@
     def __del__( self ):
         pass
 
+    def _meklst(self):
+        mylist = []
+        tst1 = []
+        tst2 = []
+        mjoin = """ left join mitem on handler.handlerid = mitem.handlerid \
+                    left join menubar on mitem.mbarid = menubar.mbarid """
 
+        mlist = self.GetData.AllHndl(ext=mjoin + " where handler.handlerid < 99000  and handler.prgdir = menubar.mbarid")
+        for itm in mlist:
+            #print(itm[1],itm[14])
+            if itm[1] not in tst1 :
+                mylist.append(itm)
+                tst1.append(itm[1])
+                tst2.append(itm[14])
+            if itm[14] not in tst2:
+                mylist.append(itm)
+                tst1.append(itm[1])
+                tst2.append(itm[14])
+        #print(mylist)
+        return mylist
     # Virtual event handlers, overide them in your derived class
     def lstkt( self, event ):
         iprog = event.GetEventObject().GetStringSelection()
-        for lpro in self.mylist:
-            if lpro[1] == self.LPro1.GetStringSelection():
-                #print(lpro)
-                fl = self.analiz(iprog,lpro[13])
-                #print(fl)
-                if lpro[12] != None:
-                    pth = GUI_PATH+lpro[13]
-                else:
-                    pth = ''
-                Data = [str(lpro[0]),lpro[2],fl,pth,lpro[3],'']
-                self.fillfld(Data)
+        nlst = event.GetEventObject().GetSelection()
+        #print(iprog,nlst,self.mylist[nlst])
+        fl, pth = self.analiz(iprog,self.mylist[nlst][14])
+        Data = [str(self.mylist[nlst][0]), self.mylist[nlst][2], fl, pth, self.mylist[nlst][3], '']
+        self.fillfld(Data)
+
         event.Skip()
 
     def chkit( self, event ):
@@ -301,6 +317,7 @@
                 self.pnl = m.MyPanel1(self.Frm)
                 self.Frm.Show()
             except ImportError as error:
+                wx.MessageBox(error)
                 print(error)
         event.Skip()
 
@@ -317,6 +334,18 @@
         event.Skip()
 
     def delpro( self, event ):
+        pronam = self.LPro1.GetStringSelection()
+        pronum = self.LPro1.GetSelection()
+
+        for pro in self.mylist:
+            if pro[1] == pronam:
+                #print(pro)
+                SetData = MS.SetData(u'', u'', u'')
+                SetData.Table = u'handler'
+                SetData.Delitem('handlerid = %d ' % pro[0])
+                wx.MessageBox("program delete from list")
+                self.LPro1.Delete(pronum)
+
         event.Skip()
 
     def opndata( self, event ):
@@ -343,11 +372,22 @@
     def analiz(self, file, path):
         if path == None:
             return ''
+        for root, dirs, files in os.walk(GUI_PATH):
+
+            if file+'.py' in files:
+                #print(root,dirs,files)
+                #print(os.path.exists(root+"\\"+file+'.py'))
+                if path.split('.')[-1] == root.split('\\')[-1]:
+                    mpath = root
+        if mpath == None:
+            return ''
         else:
-            impfil = AZ.Anlzfil(GUI_PATH+path+'\\'+file+'.py')
+            #print(mpath)
+            impfil = AZ.Anlzfil(mpath + '\\' + file + '.py')
+            #impfil = AZ.Anlzfil(GUI_PATH+path+'\\'+file+'.py')
             impfil.parsefil()
             for imp in impfil.imprts:
                 if 'GUI' in imp:
-                    return imp.split(' ')[1]
+                    return imp.split(' ')[1],mpath
             else:
                 return ''
Index: DCC/ToolBar1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n\r\n###########################################################################\r\n## Python code generated with wxFormBuilder (version Oct 26 2018)\r\n## http://www.wxformbuilder.org/\r\n##\r\n## PLEASE DO *NOT* EDIT THIS FILE!\r\n###########################################################################\r\n\r\nimport wx\r\nimport wx.xrc\r\nimport wx.dataview as dv\r\n\r\nimport Database.MenuSet2 as MS\r\n\r\nfrom Config.Init import *\r\n###########################################################################\r\n## Class MyPanel1\r\n###########################################################################\r\n\r\nclass MyPanel1 ( wx.Panel ):\r\n\r\n    def __init__( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 500,300 ), style = wx.TAB_TRAVERSAL, name = wx.EmptyString ):\r\n        wx.Panel.__init__ ( self, parent, id = id, pos = pos, size = size, style = style, name = name )\r\n\r\n        Vsz1 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        Hsz1 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        #self.TTC1 = wx.TreeCtrl( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TR_DEFAULT_STYLE )\r\n        #Hsz1.Add( self.TTC1, 1, wx.ALL|wx.EXPAND, 5 )\r\n        self.TTC1 = dv.TreeListCtrl(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TR_DEFAULT_STYLE)\r\n        self.TTC1.AppendColumn(u'ID',wx.COL_WIDTH_DEFAULT, wx.ALIGN_LEFT, wx.COL_RESIZABLE)\r\n        self.TTC1.AppendColumn(u'Name', wx.COL_WIDTH_DEFAULT, wx.ALIGN_LEFT, wx.COL_RESIZABLE)\r\n        self.TTC1.AppendColumn(u'Help', wx.COL_WIDTH_DEFAULT, wx.ALIGN_LEFT, wx.COL_RESIZABLE)\r\n        self.TTC1.AppendColumn(u'Program', wx.COL_WIDTH_DEFAULT, wx.ALIGN_LEFT, wx.COL_RESIZABLE)\r\n        Hsz1.Add(self.TTC1, 1, wx.ALL | wx.EXPAND, 5)\r\n\r\n        self.MyMenu = MS.GetData(u'Menu2.db', u'')\r\n        self.DoMenu = MS.SetData(u'', u'', u'')\r\n\r\n        self.fillitem()\r\n\r\n        Vsz1.Add( Hsz1, 1, wx.EXPAND, 5 )\r\n\r\n        Hsz2 = wx.BoxSizer( wx.HORIZONTAL )\r\n\r\n        self.btnadd = wx.Button( self, wx.ID_ANY, u\"Add\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz2.Add( self.btnadd, 0, wx.ALL, 5 )\r\n\r\n        self.btnedt = wx.Button( self, wx.ID_ANY, u\"Edit\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz2.Add( self.btnedt, 0, wx.ALL, 5 )\r\n\r\n        self.btndel = wx.Button( self, wx.ID_ANY, u\"Delete\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz2.Add( self.btndel, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz2, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n\r\n        self.SetSizer( Vsz1 )\r\n        self.Layout()\r\n\r\n        # Connect Events\r\n        self.TTC1.Bind( dv.EVT_TREELIST_ITEM_ACTIVATED, self.actitm )\r\n        self.TTC1.Bind(dv.EVT_TREELIST_ITEM_CHECKED, self.actitm)\r\n        self.TTC1.Bind( wx.EVT_TREE_ITEM_RIGHT_CLICK, self.rclkitm )\r\n        self.btndel.Bind( wx.EVT_BUTTON, self.deltol )\r\n        self.btnedt.Bind( wx.EVT_BUTTON, self.edttol )\r\n        self.btnadd.Bind( wx.EVT_BUTTON, self.addtol )\r\n\r\n    def __del__( self ):\r\n        pass\r\n\r\n\r\n    # Virtual event handlers, overide them in your derived class\r\n    def actitm( self, event ):\r\n        self.slctitm = event.GetEventObject().GetItemText(event.GetItem())\r\n        #self.rootitm = event.GetEventObject().GetRootItem()\r\n        #print(self.slctitm)\r\n        #print(self.rootitm)\r\n        for itm in self.altol:\r\n            #print(itm)\r\n            if int(self.slctitm) == itm[0]:\r\n                self.mydata = itm\r\n            #elif self.slctitm == '---'  and itm[1] == None :\r\n            #    self.mydata = itm\r\n        self.edttol(None)\r\n        event.Skip()\r\n\r\n    def rclkitm( self, event ):\r\n        event.Skip()\r\n\r\n    def deltol( self, event ):\r\n        sitm = self.TTC1.GetItemText(self.TTC1.GetSelections()[0])\r\n        for itm in self.altol:\r\n            if int(sitm) == itm[0]:\r\n                self.mydata = itm\r\n        self.Frm = wx.Frame(self)\r\n        self.Pnl = MyPanel2(self.Frm, self.mydata, u\"Delete\")\r\n        self.Frm.SetSize((520, 310))\r\n        self.Frm.Show()\r\n        event.Skip()\r\n\r\n    def edttol( self, event ):\r\n        self.Frm = wx.Frame(self, style=wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)\r\n        self.Pnl = MyPanel2(self.Frm, self.mydata, u\"Edit\")\r\n        self.Frm.SetSize((500, 310))\r\n        self.Frm.Show()\r\n\r\n    def addtol( self, event ):\r\n        self.Frm = wx.Frame(self, style=wx.CAPTION | wx.CLOSE_BOX | wx.FRAME_FLOAT_ON_PARENT | wx.TAB_TRAVERSAL)\r\n        self.Pnl = MyPanel2(self.Frm, [], u\"Add\")\r\n        self.Frm.SetSize((500, 310))\r\n        self.Frm.Show()\r\n\r\n    def fillitem(self):\r\n        isz = (16, 16)\r\n        il = wx.ImageList(isz[0], isz[1])\r\n        fldridx = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FOLDER, wx.ART_OTHER, isz))\r\n        fldropenidx = il.Add(wx.ArtProvider.GetBitmap(wx.ART_FOLDER_OPEN, wx.ART_OTHER, isz))\r\n        #fileidx = il.Add(wx.ArtProvider.GetBitmap(wx.ART_NORMAL_FILE, wx.ART_OTHER, isz))\r\n        #smileidx = il.Add(images.Smiles.GetBitmap())\r\n\r\n        self.TTC1.SetImageList(il)\r\n        self.il = il\r\n\r\n        #broot = self.TTC1.AddRoot(u'Toolbar')\r\n        root1 = self.TTC1.GetRootItem()\r\n        broot = self.TTC1.AppendItem(root1, u'Tool Bar')\r\n\r\n        #self.TTC1.SetItemImage(broot,fldridx,wx.TreeItemIcon_Normal)\r\n        #self.TTC1.SetItemImage(broot,fldropenidx,wx.TreeItemIcon_Expanded)\r\n        self.altol = self.MyMenu.GetAllTB(\"left join handler on toolbar.handlerid = handler.handlerid \\\r\n                                           left join access on toolbar.acclvlid = access.acclvlid\")\r\n        dictool = self.regrouptollbar(self.altol)\r\n\r\n        for t in dictool:\r\n            gritm = self.TTC1.AppendItem(broot, str(t))\r\n            self.TTC1.SetItemText(gritm, 0, str(t))\r\n            #self.TTC1.SetItemImage(gritm,fldridx,wx.TreeItemIcon_Normal)\r\n            #self.TTC1.SetItemImage(gritm,fldropenidx,wx.TreeItemIcon_Expanded)\r\n            for i in dictool[t]:\r\n\r\n                if i[1] == None or i[1] == '':\r\n                    ditm = self.TTC1.AppendItem(gritm,u'---')\r\n                    self.TTC1.SetItemText(ditm , 0, str(i[0]))\r\n                    self.TTC1.SetItemText(ditm, 1, u'---')\r\n                    self.TTC1.SetItemText(ditm, 2, u'---')\r\n                    self.TTC1.SetItemText(ditm, 3, u'---')\r\n\r\n                else:\r\n                    slcticn = il.Add(wx.Bitmap(ICON16_PATH+i[2],wx.BITMAP_TYPE_ANY))\r\n                    bitm = self.TTC1.AppendItem(gritm,i[1])\r\n                    self.TTC1.SetItemText(bitm, 0, str(i[0]))\r\n                    self.TTC1.SetItemText(bitm, 1, i[1])\r\n                    self.TTC1.SetItemText(bitm, 2, i[3])\r\n                    self.TTC1.SetItemText(bitm, 3, i[4])\r\n                    self.TTC1.SetItemImage(bitm,fldridx,wx.TreeItemIcon_Normal) # wx.NO_IMAGE\r\n                    self.TTC1.SetItemImage(bitm,slcticn,wx.TreeItemIcon_Selected)\r\n        #self.TTC1.Expand(broot)\r\n\r\n    def regrouptollbar(self, tooldata):\r\n        result = {}\r\n\r\n        for item in tooldata:\r\n            if item[0]//100 not in result:\r\n                newitm = [(item[0],item[1],item[2],item[3],item[8])]\r\n                result[item[0]//100] = newitm\r\n            else:\r\n                result[item[0]//100].append((item[0],item[1],item[2],item[3],item[8]))\r\n        #print(result)\r\n        return result\r\n\r\n###########################################################################\r\n## Class MyPanel2\r\n###########################################################################\r\n\r\nclass MyPanel2 ( wx.Panel ):\r\n\r\n    def __init__( self, parent, Data, Button, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 495,276 ), style = wx.TAB_TRAVERSAL, name = wx.EmptyString ):\r\n        wx.Panel.__init__ ( self, parent, id = id, pos = pos, size = size, style = style, name = name )\r\n\r\n        Vsz1 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n        Hsz0 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.Button = Button\r\n        self.Data = Data\r\n        print(self.Data)\r\n        if self.Data != []:\r\n            grp = self.Data[0]//100\r\n        else:\r\n            grp = 1\r\n\r\n\r\n\r\n        self.txtg = wx.StaticText( self, wx.ID_ANY, u\"Group\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txtg.Wrap( -1 )\r\n\r\n        Hsz0.Add( self.txtg, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.m_spinCtrlDouble1 = wx.SpinCtrlDouble( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), wx.SP_ARROW_KEYS, 1, 10, 1.000000, 1 )\r\n        self.m_spinCtrlDouble1.SetDigits( 0 )\r\n        self.m_spinCtrlDouble1.SetValue(grp)\r\n        Hsz0.Add( self.m_spinCtrlDouble1, 0, wx.ALL, 5 )\r\n\r\n        self.txt0 = wx.StaticText( self, wx.ID_ANY, u\"Toolbar Id\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt0.Wrap( -1 )\r\n\r\n        Hsz0.Add( self.txt0, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld0 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0 )\r\n        Hsz0.Add( self.fld0, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        self.txt1 = wx.StaticText( self, wx.ID_ANY, u\"Access id\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt1.Wrap( -1 )\r\n\r\n        Hsz0.Add( self.txt1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld1 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        Hsz0.Add( self.fld1, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        self.btnlst = wx.Button( self, wx.ID_ANY, u\"...\", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT )\r\n        Hsz0.Add( self.btnlst, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz0, 1, wx.EXPAND, 5 )\r\n\r\n        Hsz1 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt2 = wx.StaticText( self, wx.ID_ANY, u\"Tool name\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt2.Wrap( -1 )\r\n\r\n        Hsz1.Add( self.txt2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld2 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz1.Add( self.fld2, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.m_checkBox3 = wx.CheckBox( self, wx.ID_ANY, u\"Line\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz1.Add( self.m_checkBox3, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz1, 1, wx.EXPAND, 5 )\r\n\r\n        Hsz2 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt3 = wx.StaticText( self, wx.ID_ANY, u\"Toolbar Icon\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt3.Wrap( -1 )\r\n\r\n        Hsz2.Add( self.txt3, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.file1 = wx.FilePickerCtrl( self, wx.ID_ANY, wx.EmptyString, u\"Select a file\", u\"*.png;*.bmp;*.jpg\", wx.DefaultPosition, wx.DefaultSize, wx.FLP_DEFAULT_STYLE|wx.FLP_SMALL )\r\n        Hsz2.Add( self.file1, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.m_bitmap1 = wx.StaticBitmap( self, wx.ID_ANY, wx.NullBitmap, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz2.Add( self.m_bitmap1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz2, 1, wx.EXPAND, 5 )\r\n\r\n        Hsz3 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt4 = wx.StaticText( self, wx.ID_ANY, u\"Short text\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt4.Wrap( -1 )\r\n\r\n        Hsz3.Add( self.txt4, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld3 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz3.Add( self.fld3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.txt5 = wx.StaticText( self, wx.ID_ANY, u\"Long text\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        self.txt5.Wrap( -1 )\r\n\r\n        Hsz3.Add( self.txt5, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.fld4 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz3.Add( self.fld4, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz3, 1, wx.EXPAND, 5 )\r\n\r\n        Hsz4 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n        self.txt6 = wx.StaticText( self, wx.ID_ANY, u\"Program\", wx.DefaultPosition, wx.Size( 70,-1 ), 0 )\r\n        self.txt6.Wrap( -1 )\r\n\r\n        Hsz4.Add( self.txt6, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )\r\n\r\n        self.file2 = wx.FilePickerCtrl( self, wx.ID_ANY, wx.EmptyString, u\"Select a file\", u\"*.*;*.py\", wx.DefaultPosition, wx.DefaultSize, wx.FLP_DEFAULT_STYLE|wx.FLP_SMALL )\r\n        Hsz4.Add( self.file2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        self.fld5 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz4.Add( self.fld5, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz4, 1, wx.EXPAND, 5 )\r\n\r\n        Hsz5 = wx.WrapSizer( wx.HORIZONTAL, wx.WRAPSIZER_DEFAULT_FLAGS )\r\n\r\n        self.Box1 = wx.CheckBox( self, wx.ID_ANY, u\"Disable\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz5.Add( self.Box1, 0, wx.ALL, 5 )\r\n\r\n        self.Box2 = wx.CheckBox( self, wx.ID_ANY, u\"Hiden\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz5.Add( self.Box2, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz5, 1, wx.ALIGN_CENTER_HORIZONTAL, 5 )\r\n\r\n        Hsz6 = wx.WrapSizer( wx.HORIZONTAL, 0 )\r\n\r\n\r\n        Hsz6.Add( ( 0, 0), 1, wx.EXPAND, 5 )\r\n\r\n        self.btn1 = wx.Button( self, wx.ID_ANY, u\"Cancle\", wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz6.Add( self.btn1, 0, wx.ALL, 5 )\r\n\r\n        self.btn2 = wx.Button( self, wx.ID_ANY, Button, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n        Hsz6.Add( self.btn2, 0, wx.ALL, 5 )\r\n\r\n\r\n        Vsz1.Add( Hsz6, 0, wx.EXPAND, 5 )\r\n\r\n\r\n        self.SetSizer( Vsz1 )\r\n        self.Layout()\r\n        if self.Data != []:\r\n            self.filldata()\r\n\r\n        # Connect Events\r\n        self.btnlst.Bind( wx.EVT_BUTTON, self.lstid )\r\n        self.m_checkBox3.Bind( wx.EVT_CHECKBOX, self.adlin )\r\n        self.file1.Bind( wx.EVT_FILEPICKER_CHANGED, self.icnfil )\r\n        self.file2.Bind( wx.EVT_FILEPICKER_CHANGED, self.prgfil )\r\n        self.Box1.Bind( wx.EVT_CHECKBOX, self.disbl )\r\n        self.Box2.Bind( wx.EVT_CHECKBOX, self.hidn )\r\n        self.btn1.Bind( wx.EVT_BUTTON, self.cncl )\r\n        self.btn2.Bind( wx.EVT_BUTTON, self.Doit )\r\n\r\n    def __del__( self ):\r\n        pass\r\n\r\n\r\n    # Virtual event handlers, overide them in your derived class\r\n    def filldata(self):\r\n        if self.Data[1] == None:\r\n            self.disallline()\r\n        else:\r\n            self.fld0.SetValue(str(self.Data[0]))\r\n            self.fld1.SetValue(self.Data[6])\r\n            self.fld2.SetValue(self.Data[1])\r\n            self.fld3.SetValue(self.Data[3])\r\n            self.fld4.SetValue(self.Data[4])\r\n            self.fld5.SetValue(self.Data[8])\r\n            if self.Data[14] != 'FFFF':\r\n                self.Box2.SetValue(1)\r\n            if self.Data[15] != 1:\r\n                self.Box1.SetValue(1)\r\n            self.file1.SetPath(ICON32_PATH+self.Data[2])\r\n            self.m_bitmap1.SetBitmap(wx.Bitmap(ICON32_PATH+self.Data[2],wx.BITMAP_TYPE_ANY))\r\n\r\n    def disallline(self):\r\n        self.fld0.Disable()\r\n        self.fld1.Disable()\r\n        self.fld2.Disable()\r\n        self.fld3.Disable()\r\n        self.fld4.Disable()\r\n        self.fld5.Disable()\r\n        self.file1.Disable()\r\n        self.file2.Disable()\r\n        self.m_checkBox3.SetValue(1)\r\n\r\n    def lstid( self, event ):\r\n        event.Skip()\r\n\r\n    def adlin( self, event ):\r\n        self.disallline()\r\n\r\n        event.Skip()\r\n\r\n    def icnfil( self, event ):\r\n        self.m_bitmap1.SetBitmap(wx.Bitmap(self.file1.GetPath(), wx.BITMAP_TYPE_ANY))\r\n        event.Skip()\r\n\r\n    def prgfil( self, event ):\r\n        event.Skip()\r\n\r\n    def disbl( self, event ):\r\n        event.Skip()\r\n\r\n    def hidn( self, event ):\r\n        event.Skip()\r\n\r\n    def cncl( self, event ):\r\n        q = self.GetParent()\r\n        q.Close()\r\n\r\n    def Doit( self, event ):\r\n        getdata = MS.GetData(u'Menu2.db',u'')\r\n        setdata = MS.SetData(u'toolbar',u'',u'')\r\n        chkdata = getdata.GetAllTB()\r\n        thsdata = self.getData()\r\n        print(thsdata)\r\n        if self.Button == \"Add\":\r\n            if getdata.GetAllTB(u\"where toolid = %s \"% int(thsdata[0])) != []:\r\n                wx.MessageBox(u\"you must use a new code please change id\")\r\n            elif int(thsdata[0])//100 != self.m_spinCtrlDouble1.GetValue():\r\n                wx.MessageBox(u\"your first number of code must equal with group \")\r\n            else:\r\n                icn = thsdata[6].split(\"\\\\\")[-1]\r\n                ihd = self.gethandler(thsdata[7].split(\"\\\\\")[-1].replace(\".py\",''))\r\n\r\n                Data = [int(thsdata[0]), thsdata[2], icn, thsdata[3], thsdata[4], ihd, thsdata[1]]\r\n                setdata.Additem(u'toolid, toolname, toolicon, shrttxt, lngtxt, handlerid, acclvlid',Data)\r\n                setdata.Table = u'access'\r\n                if thsdata[8]:\r\n                    disen = 0\r\n                else:\r\n                    disen = 1\r\n                if thsdata[9]:\r\n                    shwid = '0000'\r\n                else:\r\n                    shwid = 'FFFF'\r\n                Data2 = [thsdata[1], 1, shwid, disen]\r\n                setdata.Additem(u'acclvlid, userid, acclvl, disenable',Data2)\r\n                wx.MessageBox(u\"successful add Toolbar to program\")\r\n\r\n                self.AddTool(thsdata)\r\n\r\n                ml = self.GetGrandParent()\r\n                ml.TTC1.DeleteAllItems()\r\n                ml.fillitem()\r\n                ml.Refresh()\r\n\r\n                q = self.GetParent()\r\n                q.Close()\r\n\r\n        elif self.Button == u\"Edit\":\r\n            icn = thsdata[6].split(\"\\\\\")[-1]\r\n            ihd = self.gethandler(thsdata[7].split(\"\\\\\")[-1].replace(\".py\", ''))\r\n            Data3 = [thsdata[2], icn , thsdata[3], thsdata[4], ihd, thsdata[1]]\r\n            setdata.Upditem(u'toolname = ? , toolicon = ? , shrttxt = ? , lngtxt = ? , handlerid = ? , acclvlid = ? where  toolid = %d '% int(thsdata[0]), Data3)\r\n            if thsdata[8]:\r\n                disen = 0\r\n            else:\r\n                disen = 1\r\n            if thsdata[9]:\r\n                shwid = '0000'\r\n            else:\r\n                shwid = 'FFFF'\r\n            Data4 = [1, shwid, disen]\r\n            setdata.Table = u'access'\r\n            setdata.Upditem(u'userid = ? , acclvl = ?, disenable = ? where acclvlid = \"%s\" '% thsdata[1], Data4)\r\n            ml = self.GetGrandParent()\r\n            ml.TTC1.DeleteAllItems()\r\n            ml.fillitem()\r\n            ml.Refresh()\r\n            q = self.GetParent()\r\n            q.Close()\r\n\r\n\r\n        elif self.Button == u\"Delete\":\r\n            setdata.Delitem(u\"toolbar.toolid = %d \"% int(thsdata[0]))\r\n            setdata.Table = u\"access\"\r\n            setdata.Delitem(u'access.acclvlid = \"%s\" ' % thsdata[1])\r\n            ml = self.GetGrandParent()\r\n            ml.TTC1.DeleteAllItems()\r\n            ml.fillitem()\r\n            ml.Refresh()\r\n            self.DelTool(thsdata)\r\n            q = self.GetParent()\r\n            q.Close()\r\n\r\n\r\n        else:\r\n            print(u'some error here')\r\n        event.Skip()\r\n\r\n    def getData(self):\r\n        D0 = self.fld0.GetValue()\r\n        D1 = self.fld1.GetValue()\r\n        D2 = self.fld2.GetValue()\r\n        D3 = self.fld3.GetValue()\r\n        D4 = self.fld4.GetValue()\r\n        D5 = self.fld5.GetValue()\r\n        D6 = self.file1.GetPath()\r\n        D7 = self.file2.GetPath()\r\n        D8 = self.Box1.GetValue()\r\n        D9 = self.Box2.GetValue()\r\n        return [D0,D1,D2,D3,D4,D5,D6,D7,D8,D9]\r\n\r\n    def gethandler(self, prg):\r\n        print(prg)\r\n        getdata = MS.GetData(u'Menu2.db', u'')\r\n        if prg == '':\r\n            return 10001\r\n        hdrid,mbrid = getdata.getHndlr(prg)[0]\r\n\r\n        print(hdrid,mbrid)\r\n        mdir = getdata.gethddir(mbrid)\r\n        print(mdir)\r\n        return int(hdrid)\r\n\r\n    def AddTool(self, D):\r\n        mw = self.FindWindowByName('main')\r\n        tb = mw.GetToolBar()\r\n\r\n        ppos = tb.GetToolPos(int(D[0])-1)\r\n        print(ppos)\r\n        if ppos != -1:\r\n            tb.InsertTool(ppos+1, int(D[0]), str(D[2]), wx.Bitmap(D[6]), wx.NullBitmap, wx.ITEM_NORMAL, str(D[3]), str(D[4]) )\r\n            #tb.InsertTool(ppos, int(D[0]), str(D[2]), wx.Bitmap(D[6]), wx.NullBitmap, wx.ITEM_NORMAL)\r\n\r\n        else:\r\n            tb.AddTool(int(D[0]), str(D[2]), wx.Bitmap(D[6]), wx.NullBitmap, wx.ITEM_NORMAL, str(D[3]), str(D[4]) )\r\n        tb.Realize()\r\n\r\n\r\n\r\n    def DelTool(self, D):\r\n         mw = self.FindWindowByName('main')\r\n         tb = mw.GetToolBar()\r\n         tb.DeleteTool(int(D[0]))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DCC/ToolBar1.py b/DCC/ToolBar1.py
--- a/DCC/ToolBar1.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/DCC/ToolBar1.py	(date 1623069847494)
@@ -187,7 +187,7 @@
 
         self.Button = Button
         self.Data = Data
-        print(self.Data)
+        #print(self.Data)
         if self.Data != []:
             grp = self.Data[0]//100
         else:
@@ -400,7 +400,7 @@
         setdata = MS.SetData(u'toolbar',u'',u'')
         chkdata = getdata.GetAllTB()
         thsdata = self.getData()
-        print(thsdata)
+        #print(thsdata)
         if self.Button == "Add":
             if getdata.GetAllTB(u"where toolid = %s "% int(thsdata[0])) != []:
                 wx.MessageBox(u"you must use a new code please change id")
@@ -473,6 +473,7 @@
 
 
         else:
+            wx.MessageBox(u'some error here')
             print(u'some error here')
         event.Skip()
 
@@ -490,15 +491,15 @@
         return [D0,D1,D2,D3,D4,D5,D6,D7,D8,D9]
 
     def gethandler(self, prg):
-        print(prg)
+        #print(prg)
         getdata = MS.GetData(u'Menu2.db', u'')
         if prg == '':
             return 10001
         hdrid,mbrid = getdata.getHndlr(prg)[0]
 
-        print(hdrid,mbrid)
+        #print(hdrid,mbrid)
         mdir = getdata.gethddir(mbrid)
-        print(mdir)
+        #print(mdir)
         return int(hdrid)
 
     def AddTool(self, D):
@@ -506,7 +507,7 @@
         tb = mw.GetToolBar()
 
         ppos = tb.GetToolPos(int(D[0])-1)
-        print(ppos)
+        #print(ppos)
         if ppos != -1:
             tb.InsertTool(ppos+1, int(D[0]), str(D[2]), wx.Bitmap(D[6]), wx.NullBitmap, wx.ITEM_NORMAL, str(D[3]), str(D[4]) )
             #tb.InsertTool(ppos, int(D[0]), str(D[2]), wx.Bitmap(D[6]), wx.NullBitmap, wx.ITEM_NORMAL)
Index: Database/MenuSet2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#In The name of God\r\n#!/usr/bin/env python\r\n# -*- codnig: utf-8 -*-\r\n\r\nfrom . import wxsq as sq\r\n\r\n\r\nclass GetData:\r\n    def __init__(self, DBF, sends):\r\n        self.DBF = DBF\r\n        self.sends = sends\r\n\r\n    def ShowItem(self, ibar=1):\r\n        return sq.wxsqltxt(self.DBF, \"\"\"select mitem.extid, mitem.itemid,mitem.mbarid,mitem.itemname,handler.prgname,extended.acclvlid\r\n                                        from mitem\r\n                                        left join handler on handler.handlerid = mitem.handlerid\r\n                                        left join extended on extended.extid = mitem.extid\r\n                                        where mitem.mbarid = %d\r\n                                        \"\"\" % ibar)\r\n\r\n    def gItem(self, mbar=1):\r\n        return sq.wxsqltxt(self.DBF, \"\"\"select mitem.itemname,mitem.itemid\r\n                                        from mitem\r\n                                        where mitem.mbarid = %d\r\n                                        \"\"\" % mbar)\r\n    def gBarN(self, mbar=1):\r\n        return sq.wxsqsnd(self.DBF,u'menubar',u'mbarname',u'mbarid',mbar)\r\n\r\n    def AmenuBar(self, Access=u'FFFF'):\r\n        return sq.wxsqltxt(self.DBF, \"\"\" SELECT *\r\n                                         FROM menubar,access\r\n                                         where menubar.acclvlid = access.acclvlid\r\n                                         and access.acclvl = '%s'\r\n                                         \"\"\" % Access)\r\n\r\n    def AmenuItm(self, barid=101):\r\n        return sq.wxsqltxt(self.DBF, \"\"\"SELECT DISTINCT mitem.itemid,mitem.itemname,extended.status,extended.shortcut,extended.icon,mitem.itemtyp\r\n                     FROM mitem\r\n                     left join extended on mitem.extid = extended.extid\r\n                     WHERE mitem.mbarid = %d\r\n                       \"\"\" % barid)  #ORDER BY mitem.itemid\r\n\r\n    def getmItem(self, itmid=0):\r\n        return sq.wxsqltxt(self.DBF, \"\"\" SELECT DISTINCT *\r\n                     FROM mitem\r\n                     left join extended on mitem.extid = extended.extid\r\n                     left join access on extended.acclvlid = access.acclvlid\r\n                     left join handler on mitem.handlerid = handler.handlerid\r\n                     WHERE mitem.itemid = %d \"\"\" % itmid)\r\n\r\n    def DirBar(self):\r\n        return sq.wxsqltxt(self.DBF, \"\"\"SELECT menubar.mbardir\r\n                                        FROM menubar\r\n                                        \"\"\")\r\n    def AllBar(self):\r\n        return sq.wxsqltxt(self.DBF,\"\"\"SELECT * FROM menubar\"\"\")\r\n\r\n    def RevItem(self):\r\n        return sq.wxsqltxt(self.DBF,\"\"\"select mitem.itemname,mitem.itemid \r\n                                       from mitem\r\n                                       where mitem.mbarid = (select menubar.mbarid\r\n                                            from menubar\r\n                                            where menubar.mbardir = 'GUI.Input')\r\n        \"\"\")\r\n\r\n    def MyProg(self,itemid=''):\r\n        return sq.wxsqltxt(self.DBF,\"\"\"SELECT distinct mitem.handlerid, handler.prgname\r\n            FROM mitem join handler on mitem.handlerid = handler.handlerid\r\n            WHERE mitem.itemid = %s  \"\"\" %itemid)\r\n\r\n    def MnuDir(self,itemid=''):\r\n        return  sq.wxsqltxt(self.DBF, \"\"\"SELECT menubar.mbardir\r\n              FROM mitem  JOIN menubar\r\n              ON mitem.mbarid = menubar.mbarid\r\n              WHERE mitem.itemid =  %s  \"\"\" %itemid)\r\n\r\n    def SubDir(self,itemsub=''):\r\n        return sq.wxsqltxt(self.DBF, \"\"\"SELECT handler.prgdir\r\n              FROM mitem  JOIN handler\r\n              ON mitem.handlerid = handler.handlerid\r\n              WHERE mitem.itemid = %s  \"\"\" %itemsub)\r\n\r\n    def DoHdnl(self):\r\n        return sq.wxsqltxt(self.DBF,\"\"\"select handler.prgname\r\n          from handler join mitem on mitem.handlerid = handler.handlerid\r\n          WHERE  mitem.handlerid  notnull \"\"\")\r\n\r\n    def AllHndl(self, ext=''):\r\n        return sq.wxsqltxt(self.DBF,\"\"\" select * from handler %s \"\"\" % ext)\r\n\r\n    def GetTB(self):\r\n        return sq.wxsqltxt(self.DBF,\"\"\"select toolbar.toolid,toolbar.toolname,toolbar.toolicon,toolbar.shrttxt,handler.prgname \r\n                                       from toolbar left join handler\r\n                                       on toolbar.handlerid = handler.handlerid \"\"\")\r\n\r\n    def GetAllTB(self, ext=''):\r\n        return sq.wxsqltxt(self.DBF,\"\"\" select * from toolbar %s\"\"\" % ext)\r\n\r\n    def MyTogr(self,itolid=''):\r\n        return sq.wxsqltxt(self.DBF,\"\"\"SELECT distinct toolbar.handlerid, handler.prgname\r\n            FROM toolbar join handler on toolbar.handlerid = handler.handlerid\r\n            WHERE toolbar.toolid = %s  \"\"\" %itolid)\r\n\r\n    def TolDir(self,itolid=''):\r\n        return sq.wxsqltxt(self.DBF, \"\"\" select distinct menubar.mbardir , mitem.handlerid\r\n            from menubar, toolbar  inner join mitem on mitem.handlerid = toolbar.handlerid\r\n            where menubar.mbarid = mitem.mbarid\r\n            and toolbar.toolid =  %s  \"\"\" % itolid)\r\n    def Acclvl(self,accid=''):\r\n        return sq.wxsqltxt(self.DBF, \"\"\" select * from access where access.acclvlid = '%s' \"\"\" % accid)\r\n    def gBarItm(self,mbar=''):\r\n        return  sq.wxsqltxt(self.DBF,\"\"\" select distinct mitem.mbarid , mitem.itemid , mitem.extid \r\n                                     from mitem,extended \r\n                                     where mitem.mbarid = %s\"\"\" % mbar)\r\n    def getHndlr(self, prgnam = u''):\r\n        return sq.wxsqltxt(self.DBF, \"\"\" select handler.handlerid, handler.prgdir \r\n                                    from handler     where handler.prgname = '%s'  \"\"\" %prgnam)\r\n\r\n    def gethddir(self, dirct= u''):\r\n        return sq.wxsqsnd(self.DBF,u'menubar',u'mbarid',u'mbardir',dirct)\r\n\r\n\r\n\r\nclass SetData:\r\n    def __init__(self, Table,send, data):\r\n        self.Table = Table\r\n        self.send = send\r\n        self.data = data\r\n\r\n    def Additem(self, send, data):\r\n        return sq.wxsqins('Menu2.db', self.Table, send, data)\r\n\r\n    def Additem2(self, send, data):\r\n        return sq.wxsqins2('Menu2.db', self.Table, send, data)\r\n\r\n    def Upditem(self, send, data):\r\n        return sq.wxsqlup('Menu2.db', self.Table, send, data)\r\n\r\n    def Upditem2(self, send, data):\r\n        return sq.wxsqlup2('Menu2.db', self.Table, send, data)\r\n\r\n    def Delitem(self, data):\r\n        return sq.wxsqdel('Menu2.db', self.Table, data)\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Database/MenuSet2.py b/Database/MenuSet2.py
--- a/Database/MenuSet2.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/Database/MenuSet2.py	(date 1624482182318)
@@ -11,28 +11,28 @@
         self.sends = sends
 
     def ShowItem(self, ibar=1):
-        return sq.wxsqltxt(self.DBF, """select mitem.extid, mitem.itemid,mitem.mbarid,mitem.itemname,handler.prgname,extended.acclvlid
+        return sq.wxsqltxt(self.DBF, """select distinct mitem.extid, mitem.itemid,mitem.mbarid,mitem.itemname,handler.prgname,extended.acclvlid, mitem.itemtyp
                                         from mitem
                                         left join handler on handler.handlerid = mitem.handlerid
                                         left join extended on extended.extid = mitem.extid
                                         where mitem.mbarid = %d
                                         """ % ibar)
 
-    def gItem(self, mbar=1):
+    def gItem(self, mbar=1, ext=''):
         return sq.wxsqltxt(self.DBF, """select mitem.itemname,mitem.itemid
                                         from mitem
                                         where mitem.mbarid = %d
-                                        """ % mbar)
+                                         %s """ % (mbar, ext) )
     def gBarN(self, mbar=1):
         return sq.wxsqsnd(self.DBF,u'menubar',u'mbarname',u'mbarid',mbar)
 
-    def AmenuBar(self, Access=u'FFFF'):
-        return sq.wxsqltxt(self.DBF, """ SELECT *
+    def AmenuBar(self, Access=u'FFFF',ext=''):
+        return sq.wxsqltxt(self.DBF, """ SELECT distinct *
                                          FROM menubar,access
                                          where menubar.acclvlid = access.acclvlid
                                          and access.acclvl = '%s'
-                                         """ % Access)
-
+                                         %s order by menubar.mbarid""" % (Access,ext)
+                           )
     def AmenuItm(self, barid=101):
         return sq.wxsqltxt(self.DBF, """SELECT DISTINCT mitem.itemid,mitem.itemname,extended.status,extended.shortcut,extended.icon,mitem.itemtyp
                      FROM mitem
@@ -52,8 +52,8 @@
         return sq.wxsqltxt(self.DBF, """SELECT menubar.mbardir
                                         FROM menubar
                                         """)
-    def AllBar(self):
-        return sq.wxsqltxt(self.DBF,"""SELECT * FROM menubar""")
+    def AllBar(self,ext=''):
+        return sq.wxsqltxt(self.DBF,"""SELECT * FROM menubar %s"""%ext)
 
     def RevItem(self):
         return sq.wxsqltxt(self.DBF,"""select mitem.itemname,mitem.itemid 
@@ -86,7 +86,7 @@
           WHERE  mitem.handlerid  notnull """)
 
     def AllHndl(self, ext=''):
-        return sq.wxsqltxt(self.DBF,""" select * from handler %s """ % ext)
+        return sq.wxsqltxt(self.DBF,""" select distinct * from handler %s """ % ext)
 
     def GetTB(self):
         return sq.wxsqltxt(self.DBF,"""select toolbar.toolid,toolbar.toolname,toolbar.toolicon,toolbar.shrttxt,handler.prgname 
Index: Database/PostGet.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#In The name of God\r\n#!/usr/bin/env python\r\n# -*- codnig: utf-8 -*-\r\n\r\nfrom . import wxsq as sq\r\nfrom Config.Init import *\r\n\r\nclass Get:\r\n    def __init__(self, DBF, Data, file):\r\n        self.DBF = DBF\r\n        self.Data = Data\r\n        sqlfile = DATABASE_PATH + '/sqls/' + file\r\n        self.SQLtxt = self.openSql(sqlfile)\r\n\r\n\r\n    def openSql(self, sqlfile):\r\n        with open(sqlfile) as f:\r\n            alltxt = f.readlines()\r\n        print(alltxt)\r\n        return alltxt\r\n\r\n    def GetFromDbf(self):\r\n        return sq.wxsqltxt(self.DBF, self.SQLtxt)\r\n\r\n    def GetFromDbfWithData(self):\r\n        return sq.wxsqltxt(self.DBF, self.SQLtxt + self.Data )\r\n\r\n    def __del__(self):\r\n        pass\r\n\r\n    def __hash__(self):\r\n        pass\r\n\r\n\r\n\r\nclass Post:\r\n    def __init__(self, DBF, Tabel, Field, Data):\r\n        self.DBF = DBF\r\n        self.Tabel = Tabel\r\n        self.Field = Field\r\n        self.Data = Data\r\n\r\n\r\n    def Addrecord(self):\r\n        return sq.wxsqins(self.DBF, self.Tabel, self.Field, self.Data)\r\n\r\n    def Addrecord2(self):\r\n        return sq.wxsqins2(self.DBF, self.Tabel, self.Field, self.Data)\r\n\r\n    def Updaterecord(self):\r\n        return sq.wxsqlup(self.DBF, self.Tabel, self.Field, self.Data)\r\n\r\n    def Updaterecord2(self):\r\n        return sq.wxsqlup2(self.DBF, self.Tabel, self.Field, self.Data)\r\n\r\n    def Deleterecord(self):\r\n        return sq.wxsqdel(self.DBF, self.Field, self.Data)\r\n\r\n    def DeleteAllrecord(self):\r\n        return sq.wxsqdall(self.DBF, self.Field)\r\n\r\n\r\n    def __del__(self):\r\n        pass\r\n\r\n    def __hash__(self):\r\n        pass
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Database/PostGet.py b/Database/PostGet.py
--- a/Database/PostGet.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/Database/PostGet.py	(date 1619462478682)
@@ -9,15 +9,14 @@
     def __init__(self, DBF, Data, file):
         self.DBF = DBF
         self.Data = Data
-        sqlfile = DATABASE_PATH + '/sqls/' + file
+        sqlfile = DATABASE_PATH + 'sqls' + SLASH + file
         self.SQLtxt = self.openSql(sqlfile)
 
-
     def openSql(self, sqlfile):
         with open(sqlfile) as f:
             alltxt = f.readlines()
-        print(alltxt)
-        return alltxt
+        #print(alltxt)
+        return alltxt[0]
 
     def GetFromDbf(self):
         return sq.wxsqltxt(self.DBF, self.SQLtxt)
Index: Database/sqls/DBFields
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Database/sqls/DBFields b/Database/sqls/DBFields
new file mode 100644
--- /dev/null	(date 1618673253109)
+++ b/Database/sqls/DBFields	(date 1618673253109)
@@ -0,0 +1,1 @@
+select * from sqlite_master
\ No newline at end of file
Index: Database/sqls/Show.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>select *\r\nfrom Input\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Database/sqls/Show.sql b/Database/sqls/Show.sql
--- a/Database/sqls/Show.sql	(revision caff947320997299581ac8399129b45394081384)
+++ b/Database/sqls/Show.sql	(date 1618673151072)
@@ -1,4 +1,2 @@
 select *
-from Input
-
-
+from Input
\ No newline at end of file
Index: Database/wxsq.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># In the name of God\r\n#! use/bin/env python\r\n\r\nimport sqlite3\r\nimport os\r\nfrom Config.Init import *\r\nfrom wx import MessageBox,OK,ICON_WARNING\r\n\r\nclass WXDB(object):\r\n    def __init__(self,database=\":memory:\",pathdb=os.getcwd()):\r\n        self.database=pathdb+database\r\n        #print pathdb\r\n        self.connect()\r\n\r\n    def connect(self):\r\n        #print self.database\r\n        try :\r\n           self.connection=sqlite3.connect(self.database)\r\n           self.cursor=self.connection.cursor()\r\n        except:\r\n           #print( 'No Database find')\r\n           MessageBox(u'No Database find', u'Error', OK | ICON_WARNING)\r\n\r\n        self.connected=True\r\n        self.statement=''\r\n        return self.connection\r\n\r\n    def close(self):\r\n        self.connection.commit()\r\n        self.connection.close()\r\n        self.connected=False\r\n\r\n\r\n    def commit(self):\r\n        return self.connection.commit()\r\n        \r\n    def execute(self,statments):\r\n        #with self.connect():\r\n        self.cursor.execute(statments)\r\n        return self.fetchall()\r\n        #result = self.cursor.fetchall()\r\n        #return result\r\n    \r\n    def execone(self,statments,*data):\r\n        if data == None:\r\n            self.cursor.execute(statments)\r\n        else:\r\n            self.cursor.execute(statments,data[0])\r\n        #result = self.cursor.fetchall()\r\n        #print result\r\n        return self.fetchone()\r\n\r\n    def executemany(self, statments, *data):\r\n        if data == None:\r\n            return self.cursor.executemany(statments)\r\n        else:\r\n            return self.cursor.executemany(statments, data[0])\r\n\r\n    def execuetscript(self, statments):\r\n        return self.cursor.executescript(statments)\r\n\r\n    def total_changes(self):\r\n        pass\r\n\r\n    def rollback(self):\r\n        return self.cursor.rollback()\r\n\r\n    def fetchone(self):\r\n        return self.cursor.fetchone()\r\n\r\n    def fetchall(self):\r\n        return self.cursor.fetchall()\r\n\r\n    def fetchmany(self, size):\r\n        return self.cursor.fetchmany()\r\n\r\nclass SQLite(object):\r\n    def __init__(self,tables,fields,values):\r\n        self.tables=tables\r\n        self.fields=fields\r\n        self.values=values\r\n\r\n    def create(self,**karg):\r\n        sql = 'create table {t} ({f} {p})'.format(t=str(self.tables), f=str(self.fields), p=str(self.values))\r\n        return sql\r\n\r\n    def insert(self,**karg):\r\n        sql = 'insert into '+str(self.tables)\r\n        sql = sql+ '('+str(self.fields)+')'\r\n\r\n        sql = sql +' values '+'('+'?,'*(len(self.fields.split(','))-1)+'?)'\r\n        #print sql\r\n        return sql\r\n\r\n    def select(self,*arg,**karg):\r\n        sql =  ' select '+self.fields+' from '+self.tables\r\n        #print sql\r\n        return sql\r\n\r\n    def select1(self,*arg,**karg):\r\n        sql =  ' select distinct'+self.fields+' from '+self.tables+' where '+self.values\r\n        #print sql\r\n        return sql\r\n\r\n    def update(self,**karg):\r\n        sql = ' update '+self.tables+' set '+self.fields\r\n        #print sql\r\n        return sql\r\n\r\n    def update2(self, **karg):\r\n        sql = ' update ' + self.tables + ' set ' + self.fields + ' where ' + self.values\r\n        return sql\r\n\r\n    def delete(self,**karg):\r\n        sql = ' delete from '+self.tables+' where '+self.values\r\n        return sql\r\n\r\n    def delall(self, **karg):\r\n        # sql = ' delete from '+self.tables+' where '+self.values\r\n        sql = \" delete from {t} \".format(t=self.tables)\r\n        return sql\r\n    \r\ndef MyDB_Path(database):\r\n    return WXDB(database,DATABASE_PATH)\r\n\r\ndef wxsqsel(database,tabels,fields='*',condition=''):\r\n    #global MAP\r\n    #print MAP\r\n    #print database,tabels,fields,condition\r\n        \r\n    Mydb = MyDB_Path(database)\r\n    Mydb.connect()\r\n    sql = SQLite(tabels,fields,condition)\r\n    sql1 = sql.select(fields,tabels)\r\n       \r\n    mylist = Mydb.execute(sql1)\r\n    return mylist\r\n\r\ndef wxsqsel1(database,tabels,fields='*',condition=''):\r\n\r\n    Mydb = MyDB_Path(database)\r\n    Mydb.connect()\r\n    sql = SQLite(tabels,fields,values=condition)\r\n    sql1 = sql.select1(fields,tabels,values=condition)\r\n    #print sql1   \r\n    mylist = Mydb.execute(sql1)\r\n    return mylist\r\n\r\ndef wxsqltxt(database,text):\r\n    #global MAP\r\n    Mydb = MyDB_Path(database)\r\n    mylist = Mydb.execute(text)\r\n    return mylist\r\n    \r\ndef wxsqins(database,tabels,fields,data):\r\n    #global MAP\r\n    Mydb = MyDB_Path(database)\r\n    sql = SQLite(tabels,fields,values=data)\r\n    sql1 = sql.insert()\r\n    #print sql\r\n    mylist = Mydb.execone(sql1,data)\r\n    Mydb.commit()\r\n    Mydb.close()\r\n    #print mylist\r\n    return mylist\r\n\r\ndef wxsqins2(database, tabels, fields, data):\r\n    Mydb = MyDB_Path(database)\r\n    sql = SQLite(tabels, fields, values=data)\r\n    sql1 = sql.insert()\r\n    # print sql\r\n    mylist = Mydb.executemany(sql1, data)\r\n    # Mydb.commit()\r\n    Mydb.close()\r\n    # print mylist\r\n    return mylist\r\n    \r\ndef wxsqlup(database,tabels,fields,data):\r\n    #global MAP\r\n    Mydb = MyDB_Path(database)\r\n    sql = SQLite(tabels,fields,values=data)\r\n    sql1 = sql.update()\r\n    #print sql\r\n    #print sql1\r\n    mylist = Mydb.execone(sql1,data)\r\n    Mydb.commit()\r\n    Mydb.close()\r\n    #print mylist\r\n    return mylist\r\n\r\ndef wxsqlup2(database, tabels, fields, data):\r\n    Mydb = MyDB_Path(database)\r\n    sql = SQLite(tabels, fields, values=data)\r\n    sql1 = sql.update2()\r\n    mylist = Mydb.executemany(sql1, data)\r\n    # Mydb.commit()\r\n    Mydb.close()\r\n    # print mylist\r\n    return mylist\r\n\r\ndef wxsqdel(database,tabels,data):\r\n    #global MAP\r\n    Mydb = MyDB_Path(database)\r\n    sql = SQLite(tabels,fields='',values=data)\r\n    sql1 = sql.delete()\r\n    #print sql\r\n    #print sql1\r\n    mylist = Mydb.execute(sql1)\r\n    Mydb.commit()\r\n    Mydb.close()\r\n    #print mylist\r\n    return mylist\r\n\r\ndef wxsqdall(database, tabels):\r\n    Mydb = MyDB_Path(database)\r\n    sql = SQLite(tabels, fields='', values='')\r\n    sql1 = sql.delall()\r\n    mylist = Mydb.execute(sql1)\r\n    # Mydb.commit()\r\n    Mydb.close()\r\n    # print mylist\r\n    return mylist\r\n\r\ndef wxsqsnd(database,tabel,field1,field2,data):\r\n    #global MAP\r\n    Mydb = MyDB_Path(database)\r\n    mylist = Mydb.execute('select '+tabel+'.'+field1+' from '+tabel+' where '+tabel+'.'+field2+\" = '%s' \"%data)\r\n    #print mylist\r\n    return mylist\r\n\r\n\r\n    \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Database/wxsq.py b/Database/wxsq.py
--- a/Database/wxsq.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/Database/wxsq.py	(date 1619462478713)
@@ -227,6 +227,3 @@
     mylist = Mydb.execute('select '+tabel+'.'+field1+' from '+tabel+' where '+tabel+'.'+field2+" = '%s' "%data)
     #print mylist
     return mylist
-
-
-    
Index: GUI/API/Pnl0.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*- \r\n\r\n###########################################################################\r\n## Python code generated with wxFormBuilder (version Jun 17 2015)\r\n## http://www.wxformbuilder.org/\r\n##\r\n## PLEASE DO \"NOT\" EDIT THIS FILE!\r\n###########################################################################\r\n\r\nimport wx\r\n#import wx.xrc\r\n\r\n###########################################################################\r\n## Class MyPanel1\r\n###########################################################################\r\n\r\nclass MyPanel1 ( wx.Panel ):\r\n\t\r\n\tdef __init__( self, parent , txt='' , btn='Ok' ):\r\n\t\twx.Panel.__init__ ( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 300,100 ), style = wx.TAB_TRAVERSAL )\r\n\t\t\r\n\t\tbSizer1 = wx.BoxSizer( wx.VERTICAL )\r\n\t\t\r\n\t\tbSizer2 = wx.BoxSizer( wx.VERTICAL )\r\n\t\t\r\n\t\tself.m_staticText1 = wx.StaticText( self, wx.ID_ANY, txt, wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_CENTRE )\r\n\t\tself.m_staticText1.Wrap( -1 )\r\n\t\tbSizer2.Add( self.m_staticText1, 5, wx.ALL|wx.EXPAND, 5 )\r\n\t\t\r\n\t\t\r\n\t\tbSizer1.Add( bSizer2, 1, wx.EXPAND, 5 )\r\n\t\t\r\n\t\tbSizer3 = wx.BoxSizer( wx.VERTICAL )\r\n\t\t\r\n\t\tself.m_button1 = wx.Button( self, wx.ID_ANY, btn, wx.DefaultPosition, wx.DefaultSize, 0 )\r\n\t\tbSizer3.Add( self.m_button1, 0, wx.ALIGN_CENTER|wx.ALL, 5 )\r\n\t\t\r\n\t\t\r\n\t\tbSizer1.Add( bSizer3, 0, wx.EXPAND, 5 )\r\n\t\t\r\n\t\t\r\n\t\tself.SetSizer( bSizer1 )\r\n\t\tself.Layout()\r\n\t\t\r\n\t\t# Connect Events\r\n\t\tself.m_button1.Bind( wx.EVT_BUTTON, self.onok )\r\n\t\r\n\tdef __del__( self ):\r\n\t\tpass\r\n\t\r\n\t\r\n\t# Virtual event handlers, overide them in your derived class\r\n\tdef onok( self, event ):\r\n\t\tq=self.GetParent()\r\n\t\t#print q\r\n\t\tq.Close()\r\n\t\treturn -1\r\n\t\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/API/Pnl0.py b/GUI/API/Pnl0.py
--- a/GUI/API/Pnl0.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/GUI/API/Pnl0.py	(date 1623780695932)
@@ -9,51 +9,73 @@
 
 import wx
 #import wx.xrc
+import re
+try:
+    from agw import hyperlink as hl
+except ImportError: # if it's not there locally, try the wxPython lib.
+    import wx.lib.agw.hyperlink as hl
 
 ###########################################################################
 ## Class MyPanel1
 ###########################################################################
 
 class MyPanel1 ( wx.Panel ):
-	
-	def __init__( self, parent , txt='' , btn='Ok' ):
-		wx.Panel.__init__ ( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 300,100 ), style = wx.TAB_TRAVERSAL )
-		
-		bSizer1 = wx.BoxSizer( wx.VERTICAL )
-		
-		bSizer2 = wx.BoxSizer( wx.VERTICAL )
-		
-		self.m_staticText1 = wx.StaticText( self, wx.ID_ANY, txt, wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_CENTRE )
-		self.m_staticText1.Wrap( -1 )
-		bSizer2.Add( self.m_staticText1, 5, wx.ALL|wx.EXPAND, 5 )
-		
-		
-		bSizer1.Add( bSizer2, 1, wx.EXPAND, 5 )
-		
-		bSizer3 = wx.BoxSizer( wx.VERTICAL )
-		
-		self.m_button1 = wx.Button( self, wx.ID_ANY, btn, wx.DefaultPosition, wx.DefaultSize, 0 )
-		bSizer3.Add( self.m_button1, 0, wx.ALIGN_CENTER|wx.ALL, 5 )
-		
-		
-		bSizer1.Add( bSizer3, 0, wx.EXPAND, 5 )
-		
-		
-		self.SetSizer( bSizer1 )
-		self.Layout()
-		
-		# Connect Events
-		self.m_button1.Bind( wx.EVT_BUTTON, self.onok )
-	
-	def __del__( self ):
-		pass
-	
-	
-	# Virtual event handlers, overide them in your derived class
-	def onok( self, event ):
-		q=self.GetParent()
-		#print q
-		q.Close()
-		return -1
-	
+
+    def __init__( self, parent , txt='' , btn='Ok' ):
+        """
+
+        :type txt: object
+        """
+        wx.Panel.__init__ ( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 500,300 ), style = wx.TAB_TRAVERSAL )
+
+        bSizer1 = wx.BoxSizer( wx.VERTICAL )
+
+        bSizer2 = wx.BoxSizer( wx.VERTICAL )
+
+        url = re.search(r'(http?://\S+)', txt)
+
+        if url != None:
+            url = url.group()
+            txt = txt.replace(url,'')
+
+        self.m_staticText1 = wx.StaticText( self, wx.ID_ANY, txt, wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_CENTRE )
+        self.m_staticText1.Wrap( -1 )
+
+        bSizer2.Add( self.m_staticText1, 5, wx.ALL|wx.EXPAND, 5 )
+
+        if url != None:
+
+            self._hyper1 = hl.HyperLinkCtrl(self, wx.ID_ANY, url, wx.DefaultPosition, wx.DefaultSize,wx.ALIGN_CENTER, URL=url)
+            bSizer2.Add(self._hyper1, 5, wx.ALL|wx.EXPAND, 5)
+
+
+
+        bSizer1.Add( bSizer2, 1, wx.EXPAND, 5 )
+
+        bSizer3 = wx.BoxSizer( wx.VERTICAL )
+
+        self.m_button1 = wx.Button( self, wx.ID_ANY, btn, wx.DefaultPosition, wx.DefaultSize, 0 )
+        bSizer3.Add( self.m_button1, 0, wx.ALIGN_CENTER|wx.ALL, 5 )
+
+
+        bSizer1.Add( bSizer3, 0, wx.EXPAND, 5 )
+
+
+        self.SetSizer( bSizer1 )
+        self.Layout()
+
+        # Connect Events
+        self.m_button1.Bind( wx.EVT_BUTTON, self.onok )
+
+    def __del__( self ):
+        pass
+
+
+    # Virtual event handlers, overide them in your derived class
+    def onok( self, event ):
+        q=self.GetParent()
+        #print q
+        q.Close()
+        return -1
+
 
Index: mainpro.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># In the name of God\r\n# Main Program Start\r\n#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n\r\nimport wx\r\nimport os\r\nimport wx.adv\r\n\r\nimport sys \r\nimport glob\r\n\r\nimport GUI.window as window\r\nfrom Config.Init import *\r\n\r\n#import Utility.user as user\r\n\r\n\r\n\r\nclass mainApp(wx.App):\r\n\r\n    def OnInit(self):\r\n        #check directory and path in config file and program\r\n\r\n        #check Databases of program\r\n\r\n        #check Date,Time,propertis of file\r\n\r\n        #Inter username and password of users\r\n               \r\n\r\n        #Check lock if nassesry\r\n\r\n        #check hardware and connection\r\n        #SIZE = wx.DisplaySize()\r\n        #print SIZE\r\n\r\n        #do main windows of program \r\n\r\n        #frame = window.MainWin()\r\n        #frame.SetSize(SIZE)\r\n        #frame.SetPosition((1,1))\r\n        #frame.CenterOnScreen()\r\n        \r\n        #frame.Show()\r\n        locale = wx.Locale(wx.LANGUAGE_ENGLISH)\r\n        splash = MySplashScreen()\r\n        splash.Show()\r\n\r\n        return True\r\n\r\nclass MySplashScreen(wx.adv.SplashScreen):\r\n    def __init__(self):\r\n\r\n        #bmp = wx.Image(opj(SPALSH_PATH+\"splash3.jpg\")).ConvertToBitmap()\r\n        bmp = wx.Bitmap(os.path.normpath(os.path.join(SPALSH_PATH + \"splash3.png\")),wx.BITMAP_TYPE_PNG)\r\n        wx.adv.SplashScreen.__init__(self, bmp,\r\n                                 wx.adv.SPLASH_CENTRE_ON_SCREEN | wx.adv.SPLASH_TIMEOUT,\r\n                                 5000, None, style=wx.BORDER_SIMPLE|wx.FRAME_NO_TASKBAR|wx.STAY_ON_TOP)\r\n\r\n        self.Bind(wx.EVT_CLOSE, self.OnClose)\r\n        #self.fc = wx.FutureCall(2000, self.ShowMain)\r\n        self.fc = wx.CallLater(2000, self.ShowMain)\r\n\r\n    def OnClose(self, evt):\r\n        # Make sure the default handler runs too so this window gets destroyed\r\n        evt.Skip()\r\n        self.Hide()\r\n\r\n        # if the timer is still running then go ahead and show the main frame now\r\n        if self.fc.IsRunning():\r\n            self.fc.Stop()\r\n            self.ShowMain()\r\n\r\n    def ShowMain(self):\r\n        SIZE = wx.DisplaySize()\r\n        frame = window.MainWin()\r\n        frame.SetSize(SIZE)\r\n        frame.SetPosition((1, 1))\r\n        # frame.CenterOnScreen()\r\n        frame.Show()\r\n        # frame = wxPythonDemo(None, \"wxPython: (A Demonstration)\")\r\n        # frame.Show()\r\n        if self.fc.IsRunning():\r\n            self.Raise()\r\n        # wx.CallAfter(frame.ShowTip)\r\n\r\nif __name__ == '__main__':\r\n    app = mainApp()\r\n    app.MainLoop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mainpro.py b/mainpro.py
--- a/mainpro.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/mainpro.py	(date 1624384664081)
@@ -11,6 +11,8 @@
 import glob
 
 import GUI.window as window
+import GUI.window2 as window2
+import GUI.Start as Strt
 from Config.Init import *
 
 #import Utility.user as user
@@ -20,71 +22,15 @@
 class mainApp(wx.App):
 
     def OnInit(self):
-        #check directory and path in config file and program
 
-        #check Databases of program
 
-        #check Date,Time,propertis of file
-
-        #Inter username and password of users
-               
-
-        #Check lock if nassesry
-
-        #check hardware and connection
-        #SIZE = wx.DisplaySize()
-        #print SIZE
-
-        #do main windows of program 
-
-        #frame = window.MainWin()
-        #frame.SetSize(SIZE)
-        #frame.SetPosition((1,1))
-        #frame.CenterOnScreen()
-        
-        #frame.Show()
         locale = wx.Locale(wx.LANGUAGE_ENGLISH)
-        splash = MySplashScreen()
-        splash.Show()
+        #splash = MySplashScreen()
+        splash = Strt.MySplashScreen(window2)
+        splash.Show(True)
 
         return True
 
-class MySplashScreen(wx.adv.SplashScreen):
-    def __init__(self):
-
-        #bmp = wx.Image(opj(SPALSH_PATH+"splash3.jpg")).ConvertToBitmap()
-        bmp = wx.Bitmap(os.path.normpath(os.path.join(SPALSH_PATH + "splash3.png")),wx.BITMAP_TYPE_PNG)
-        wx.adv.SplashScreen.__init__(self, bmp,
-                                 wx.adv.SPLASH_CENTRE_ON_SCREEN | wx.adv.SPLASH_TIMEOUT,
-                                 5000, None, style=wx.BORDER_SIMPLE|wx.FRAME_NO_TASKBAR|wx.STAY_ON_TOP)
-
-        self.Bind(wx.EVT_CLOSE, self.OnClose)
-        #self.fc = wx.FutureCall(2000, self.ShowMain)
-        self.fc = wx.CallLater(2000, self.ShowMain)
-
-    def OnClose(self, evt):
-        # Make sure the default handler runs too so this window gets destroyed
-        evt.Skip()
-        self.Hide()
-
-        # if the timer is still running then go ahead and show the main frame now
-        if self.fc.IsRunning():
-            self.fc.Stop()
-            self.ShowMain()
-
-    def ShowMain(self):
-        SIZE = wx.DisplaySize()
-        frame = window.MainWin()
-        frame.SetSize(SIZE)
-        frame.SetPosition((1, 1))
-        # frame.CenterOnScreen()
-        frame.Show()
-        # frame = wxPythonDemo(None, "wxPython: (A Demonstration)")
-        # frame.Show()
-        if self.fc.IsRunning():
-            self.Raise()
-        # wx.CallAfter(frame.ShowTip)
-
 if __name__ == '__main__':
     app = mainApp()
     app.MainLoop()
Index: GUI/Main/DBv1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/Main/DBv1.py b/GUI/Main/DBv1.py
new file mode 100644
--- /dev/null	(date 1622052094077)
+++ b/GUI/Main/DBv1.py	(date 1622052094077)
@@ -0,0 +1,38 @@
+# In the name of God
+# -*- coding: utf-8 -*-
+# !usr/bin/env python
+
+import wx
+import DCC.DBDev1 as DBV
+from Config.Init import *
+
+
+class telframe(wx.Frame):
+    def __init__(self, parent):
+        wx.Frame.__init__(self, parent, style=wx.FRAME_FLOAT_ON_PARENT | wx.DEFAULT_FRAME_STYLE)
+        self.parent = parent
+
+
+        self.panel = DBV.MyPanel1(self)
+
+    def closeit(self):
+        self.Close(True)
+
+
+def size():
+    return (-1, -1)
+
+
+def main(panel=None):
+    #locale = wx.Locale(wx.LANGUAGE_ENGLISH)
+
+    parent = panel.GetParent()
+
+    frame = telframe(parent)
+    frame.SetTitle(u'Database Develop')
+    frame.SetSize((440, 465))
+    frame.Show()
+
+
+if __name__ == '__main__':
+    main()
Index: GUI/Main/PAv1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/Main/PAv1.py b/GUI/Main/PAv1.py
new file mode 100644
--- /dev/null	(date 1622052114873)
+++ b/GUI/Main/PAv1.py	(date 1622052114873)
@@ -0,0 +1,38 @@
+# In the name of God
+# -*- coding: utf-8 -*-
+# !usr/bin/env python
+
+import wx
+import DCC.AuiPan1 as APV
+from Config.Init import *
+
+
+class telframe(wx.Frame):
+    def __init__(self, parent):
+        wx.Frame.__init__(self, parent, style=wx.FRAME_FLOAT_ON_PARENT | wx.DEFAULT_FRAME_STYLE)
+        self.parent = parent
+
+
+        self.panel = APV.MyPanel1(self)
+
+    def closeit(self):
+        self.Close(True)
+
+
+def size():
+    return (-1, -1)
+
+
+def main(panel=None):
+    #locale = wx.Locale(wx.LANGUAGE_ENGLISH)
+
+    parent = panel.GetParent()
+
+    frame = telframe(parent)
+    frame.SetTitle(u'Pane Aui Develop')
+    frame.SetSize((660, 400))
+    frame.Show()
+
+
+if __name__ == '__main__':
+    main()
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.6 (Employee3-master)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision caff947320997299581ac8399129b45394081384)
+++ b/.idea/misc.xml	(date 1626512857518)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.6 (Employee3-master)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7 (ENVN)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: GUI/MainMenu2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># In the name of God\r\n# Cearte Menu main Frame File\r\n# ! /usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n\r\nimport Database.MenuSet2 as MS\r\nimport wx\r\nimport os\r\nfrom Config.Init import *\r\n\r\n\r\nclass MainMenu():\r\n    def __init__(self):\r\n        self.createMenuBar()\r\n        #M = MenuData()\r\n        #self.m = M.menuBar()\r\n        self.mid = 1001\r\n\r\n    def createMenuBar(self):\r\n        self.menuBar = wx.MenuBar()\r\n        #self.mhand = []\r\n        self.m = MenuData()\r\n        for eachMenuData in self.m.menuBar():\r\n            menuLabel = eachMenuData[1]\r\n            menuItem = self.m.menuItem(eachMenuData[0])\r\n\r\n            self.menuBar.Append(self.createMenu(menuItem), menuLabel)\r\n            #if eachMenuData[3] == '31cd':\r\n            #    print(self.menuBar)\r\n\r\n        # print self.menuBar\r\n        return self.menuBar\r\n\r\n    def createMenu(self, menuData):\r\n        self.menu = wx.Menu()\r\n        #print(menuData)\r\n        for echitem in menuData:\r\n            #print(echitem)\r\n            if type(echitem) != list:\r\n                eachId, eachLabel, eachStatus, shrtcut, echicon, mtype = echitem\r\n\r\n                if not eachLabel:\r\n                    self.menu.AppendSeparator()\r\n                    continue\r\n                if shrtcut != None:\r\n                    itmlebl = eachLabel + u'\\t' + shrtcut\r\n                else:\r\n                    itmlebl = eachLabel\r\n\r\n                if mtype == 'C':\r\n                    self.menuItem = self.menu.AppendCheckItem(eachId, itmlebl, eachStatus)\r\n                elif mtype == 'R':\r\n                    self.menuItem = self.menu.AppendRadioItem(eachId, itmlebl)\r\n                elif mtype == 'N':\r\n                    self.menuItem = self.menu.Append(eachId, itmlebl, eachStatus)\r\n                else:\r\n                    print('mtype has a error')\r\n                if echicon != None and echicon != '':\r\n                    self.menuItem.SetBitmap(wx.Bitmap(ICON16_PATH + echicon, wx.BITMAP_TYPE_ANY))\r\n\r\n            else:\r\n                for ech in echitem:\r\n                    eachId, eachLabel, eachStatus, shrtcut, echicon, mtype = ech\r\n                    if mtype == 'S':\r\n                        iroot = self.createSubmenu(eachId)\r\n                        self.menuItem = self.menu.AppendSubMenu(iroot,eachLabel)\r\n                    else:\r\n                        self.menuItem =  iroot.Append(eachId,eachLabel,eachStatus)\r\n\r\n        # print self.menu\r\n        return self.menu\r\n\r\n    def createSubmenu(self, mroot ):\r\n        mroot = wx.Menu()\r\n        return mroot\r\n\r\n    #def createHandler(self):\r\n        # print self.menu.GetEventHandler()\r\n        #return self.menu.GetEventHandler\r\n\r\n    def Onmenu(self, event):\r\n        self.mid = event.GetId()\r\n        # print self.GetItemId()\r\n\r\n    def GetItemId(self):\r\n        #print(self.menuItem)\r\n        return self.menuItem\r\n\r\n\r\nclass MenuData(object):\r\n    def __init__(self):\r\n        self.MySql = MS.GetData(u'Menu2.db', u'')\r\n        self.ToSql = MS.SetData(u'', u'',u'')\r\n\r\n    def menuBar(self):\r\n        self.mbar = []\r\n        for row in self.MySql.AmenuBar():\r\n            self.mbar.append(row)\r\n        return self.mbar\r\n\r\n    def menuItem(self, i):\r\n        self.bitm = self.MySql.AmenuItm(i)\r\n        self.mitem = []\r\n        self.sitem = []\r\n        for itm in self.bitm:\r\n            #print(itm)\r\n            if itm[-1] == 'S':\r\n                self.sitem.append(itm)\r\n                stm = self.MySql.AmenuItm(itm[0])\r\n                for s in stm:\r\n                    self.sitem.append(s)\r\n                #self.mitem.append(itm)\r\n                self.mitem.append(self.sitem)\r\n            else:\r\n                self.mitem.append(itm)\r\n        #print( self.mitem)\r\n        return self.mitem\r\n\r\n    def menuDir(self):\r\n        self.Bdir = self.MySql.DirBar()\r\n        self.mdir = []\r\n        for row in self.Bdir:\r\n            self.mdir.append(row)\r\n        # print self.mdir\r\n        return self.mdir\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/MainMenu2.py b/GUI/MainMenu2.py
--- a/GUI/MainMenu2.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/GUI/MainMenu2.py	(date 1623737367436)
@@ -12,6 +12,7 @@
 class MainMenu():
     def __init__(self):
         self.createMenuBar()
+        #self.menuItem = self.menu.Append(0,'','')
         #M = MenuData()
         #self.m = M.menuBar()
         self.mid = 1001
@@ -28,7 +29,7 @@
             #if eachMenuData[3] == '31cd':
             #    print(self.menuBar)
 
-        # print self.menuBar
+        #print( self.menuBar )
         return self.menuBar
 
     def createMenu(self, menuData):
@@ -67,7 +68,7 @@
                     else:
                         self.menuItem =  iroot.Append(eachId,eachLabel,eachStatus)
 
-        # print self.menu
+        #print(self.menu)
         return self.menu
 
     def createSubmenu(self, mroot ):
@@ -94,7 +95,7 @@
 
     def menuBar(self):
         self.mbar = []
-        for row in self.MySql.AmenuBar():
+        for row in self.MySql.AmenuBar(ext=' and menubar.mbarid < 9999  '):
             self.mbar.append(row)
         return self.mbar
 
@@ -123,3 +124,38 @@
             self.mdir.append(row)
         # print self.mdir
         return self.mdir
+
+
+class AuiMenu(wx.MenuBar):
+    def __init__(self):
+        wx.MenuBar.__init__(self, style=0)
+        self.m = MenuData()
+        print(self.m.menuBar())
+        self.createMenuBar()
+
+
+    def createMenuBar(self):
+        for eachmenu in self.m.menuBar():
+            menutitle = eachmenu[1]
+            print(self.m.menuItem(eachmenu[0]))
+            self.Append(self.createMenuItem(self.m.menuItem(eachmenu[0])),menutitle)
+
+    def createMenuItem(self, menudata):
+        self.menu = wx.Menu()
+
+        return self.menu
+
+    def AddItem(self):
+        pass
+
+    def AddSubMenu(self):
+        pass
+
+    def AddSepar(self):
+        pass
+
+    def AddCheck(self):
+        pass
+
+    def AddRadio(self):
+        pass
\ No newline at end of file
Index: .idea/Temp5.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.6 (Employee3-master)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"TestRunnerService\">\r\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"Unittests\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Temp5.iml b/.idea/Temp5.iml
--- a/.idea/Temp5.iml	(revision caff947320997299581ac8399129b45394081384)
+++ b/.idea/Temp5.iml	(date 1626512857478)
@@ -2,10 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.6 (Employee3-master)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.7 (ENVN)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
-  <component name="TestRunnerService">
-    <option name="PROJECT_TEST_RUNNER" value="Unittests" />
-  </component>
 </module>
\ No newline at end of file
Index: GUI/Program/buyit.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#In the name of God\r\n# -*- coding: utf-8 -*-\r\n#!usr/bin/env python\r\n\r\nimport wx\r\nimport GUI.API.Pnl0 as Pnl0\r\nfrom  Config.Init import *\r\n\r\nclass telframe(wx.Frame):\r\n    def __init__(self,parent):\r\n        wx.Frame.__init__(self,parent,style=wx.FRAME_FLOAT_ON_PARENT|wx.DEFAULT_FRAME_STYLE)\r\n        self.parent=parent\r\n\r\n        txt = thistxt('disit.txt')\r\n        btn = u'ok'\r\n               \r\n        self.panel = Pnl0.MyPanel1(self,txt,btn)\r\n\r\n        \r\n    def closeit(self):\r\n        self.Close(True)\r\n\r\ndef size():\r\n    return (-1,-1)\r\n\r\ndef main(panel=None ):\r\n    locale = wx.Locale(wx.LANGUAGE_ENGLISH)\r\n    \r\n    parent =  panel.GetParent()\r\n    \r\n    frame = telframe(parent )\r\n    frame.SetTitle(u'Note')\r\n    frame.SetSize((400,250))\r\n    frame.Show()\r\n    \r\n\r\n    \r\n\r\nif __name__ == '__main__':\r\n    #app = wx.App(False) \r\n    main()\r\n    #app.MainLoop()\r\n    \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/Program/buyit.py b/GUI/Program/buyit.py
--- a/GUI/Program/buyit.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/GUI/Program/buyit.py	(date 1567010914308)
@@ -30,7 +30,7 @@
     
     frame = telframe(parent )
     frame.SetTitle(u'Note')
-    frame.SetSize((400,250))
+    frame.SetSize((300,160))
     frame.Show()
     
 
Index: GUI/BG2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># In the name of God\r\n# -*- coding: utf-8 -*-\r\n# Windows and Panels main Frame File\r\n#! /usr/bin/env python\r\n\r\nimport wx\r\nimport wx.aui as wxaui\r\nfrom Config.Init import *\r\n\r\nimport GUI.proman as pro\r\n\r\n\r\n\r\nclass BGPanel(wx.Panel):\r\n\tdef __init__( self,parent,BGfile ):\r\n\t\twx.Panel.__init__ ( self, parent=parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.TAB_TRAVERSAL )\r\n\r\n\t\t#bSizer2 = wx.BoxSizer( wx.VERTICAL )\r\n\r\n\t\tself.BGfile = BGfile\r\n\t\t\r\n\t\tself.SetBackgroundStyle(wx.BG_STYLE_ERASE)\r\n\t\tself.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBackground)\r\n\r\n\t\t#self.setmenu()\r\n\r\n\r\n\t\t#bSizer2.Add( self.m_bitmap4, 5, wx.ALIGN_CENTER|wx.ALL, 5 )\r\n\r\n\r\n\t\t#self.SetSizer( bSizer2 )\r\n\t\t#self.Layout()\r\n\r\n\t\t# Connect Events\r\n\r\n\t\t#self.Bind( wx.EVT_RIGHT_DOWN, self.m_bitmap4OnContextMenu )\r\n\t\tself.Bind( wx.EVT_CONTEXT_MENU, self.setmenu)\r\n\t\tself.Bind(wxaui.EVT_AUI_RENDER, self.OnEraseBackground)\r\n\r\n\tdef __del__( self ):\r\n\t\tpass\r\n\r\n\t# Virtual event handlers, overide them in your derived class\r\n\r\n\tdef m_bitmap4OnContextMenu( self, event ):\r\n\t\tself.PopupMenu(self.m1)\r\n\r\n\t\t#print (self.itm3.IsChecked(),self.itm2.IsChecked())\r\n\t\t#print self.itm3.IsChecked(),self.itm4.IsChecked()\r\n\r\n\tdef setmenu(self,event):\r\n\t\tself.MnuDic = { 1: [u'Menu Change',9999] ,2:[u'Toolbar Change',9998],3:[u'Panes Change',1002],4:[u'',0],\r\n\t\t\t\t\t5:[u'Databases...',1002],6:[u'Programs...',9995],7:[u'ML Design...',1002],8:[u'',0],9:[u'Settings...',1002] }\r\n\t\tself.m1 = wx.Menu()\r\n\r\n\t\tself.itms = []\r\n\t\ti = 0\r\n\t\tfor itm in self.MnuDic :\r\n\t\t\tself.Bind(wx.EVT_MENU, self.OnPopupOne, id=itm)\r\n\t\t\tif self.MnuDic[itm][0] == u'':\r\n\t\t\t\tself.m1.AppendSeparator()\r\n\t\t\telse:\r\n\t\t\t\t#self.itms.append( wx.MenuItem(self.m1, wx.ID_ANY, MnuDic[itm][0], wx.EmptyString) )\r\n\t\t\t\tself.m1.Append(itm, self.MnuDic[itm][0])\r\n\t\t\t\t#self.m1.Append(itm, self.itms[i])\r\n\t\t\t\t#self.Bind(wx.EVT_MENU, self.OnPopupOne, id=MnuDic[itm][1])\r\n\t\t\t\ti = i + 1\r\n\r\n\t\tself.PopupMenu(self.m1)\r\n\t\tself.m1.Destroy()\r\n\r\n\tdef OnPopupOne(self, event):\r\n\t\t#print(event,event.GetId())\r\n\t\tpmid = event.GetId()\r\n\t\ta = pro.DoProgram(self.MnuDic[pmid][1],'A')\r\n\t\ts = a.size() if 'size' in dir(a) else ()\r\n\t\twin1 = wx.Frame(self, -1)\r\n\t\twin1.SetSize(s)\r\n\t\ta.main(win1)\r\n\r\n\tdef OnEraseBackground(self, evt):\r\n\t\t# yanked from ColourDB.py\r\n\t\t#print(evt)\r\n\t\tdc = evt.GetDC()\r\n\t\tif not dc:\r\n\t\t\tdc = wx.ClientDC(self)\r\n\t\t\trect = self.GetUpdateRegion().GetBox()\r\n\t\t\t#dc.SetClippingRect(rect)\r\n\t\t\tdc.SetClippingRegion(rect)\r\n\t\tdc.Clear()\r\n\t\tbmp = wx.Bitmap(PICS_PATH+self.BGfile)\r\n\t\tdc.DrawBitmap(bmp, 0, 0)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/BG2.py b/GUI/BG2.py
--- a/GUI/BG2.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/GUI/BG2.py	(date 1624540272883)
@@ -49,8 +49,8 @@
 		#print self.itm3.IsChecked(),self.itm4.IsChecked()
 
 	def setmenu(self,event):
-		self.MnuDic = { 1: [u'Menu Change',9999] ,2:[u'Toolbar Change',9998],3:[u'Panes Change',1002],4:[u'',0],
-					5:[u'Databases...',1002],6:[u'Programs...',9995],7:[u'ML Design...',1002],8:[u'',0],9:[u'Settings...',1002] }
+		self.MnuDic = { 1: [u'Menu Change',9999] ,2:[u'Toolbar Change',9998],3:[u'Panes Change',9997],4:[u'',0],
+					5:[u'Databases...',9996],6:[u'Programs...',9995],7:[u'Add Tools...',9994],8:[u'',0],9:[u'ML Design...',9990],10:[u'',0],11:[u'Settings...',9992] }
 		self.m1 = wx.Menu()
 
 		self.itms = []
@@ -89,4 +89,10 @@
 			dc.SetClippingRegion(rect)
 		dc.Clear()
 		bmp = wx.Bitmap(PICS_PATH+self.BGfile)
-		dc.DrawBitmap(bmp, 0, 0)
+		img = bmp.ConvertToImage()
+		img2 = img.Scale(wx.GetDisplaySize()[0],wx.GetDisplaySize()[1])
+		bmp2 = img2.ConvertToBitmap()
+		#print(dir(img2))
+		#print(bmp2.GetWidth(),bmp2.GetHeight())
+		#print(wx.GetDisplaySize())
+		dc.DrawBitmap(bmp2, 0, 0)
Index: GUI/window.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># In the name of God\r\n# Main Program Start\r\n#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n\r\n\r\nimport wx\r\nimport wx.aui\r\nimport wx.html\r\n\r\nimport GUI.MainMenu2 as MM\r\nimport GUI.MainTool as MT\r\n\r\nimport GUI.AuiPanel.PAui as PA\r\n\r\nimport importlib\r\n\r\nimport GUI.BG2 as BG\r\n\r\n#import Config.basedata as bs\r\n#import Utility.massage as ms\r\nimport Utility.eCalClak1 as C1\r\nimport Utility.DigitClack as DgK\r\n#import Utility.user as user\r\nfrom Config.Init import * \r\nimport wx.dataview\r\n\r\nimport GUI.proman as pro\r\n  \r\nclass MainWin(wx.Frame):\r\n    def __init__(self):\r\n        wx.Frame.__init__(self,None,title=u'main',size=(800,600))\r\n\r\n        #Check config for first start prgram ===============\r\n        \r\n        #Check config for show or hide aui panels=========\r\n\r\n        STBT = 'N'\r\n        bps = 1\r\n        tps = 1\r\n        BGF = \"V10.jpg\"\r\n\r\n        #Menu of Program============== \r\n        menu = MM.MainMenu()\r\n        statusBar = self.CreateStatusBar()\r\n        imenu = menu.createMenuBar()\r\n\r\n        self.SetMenuBar(imenu)\r\n        h = menu.GetItemId()\r\n        h1 = menu.mid\r\n        self.Bind(wx.EVT_MENU_RANGE, self.OnMenu, id=h1, id2=h.GetId())\r\n\r\n        #Enable or Disable Menu==========================\r\n        #imenu.EnableTop(3, False)\r\n\r\n        #Show aui panels==============\r\n        #self.Toolbar()\r\n\r\n\r\n        #Aui Panels of Program==================\r\n        self.SetSizeHints( wx.DefaultSize, wx.DefaultSize )\r\n        self.m_mgr = wx.aui.AuiManager()\r\n        self.m_mgr.SetManagedWindow( self )\r\n        self.m_mgr.SetFlags(wx.aui.AUI_MGR_DEFAULT)\r\n\r\n        # Create Tool Bars=======================\r\n        if STBT == 'N':\r\n            self.Toolbar()\r\n        else:\r\n            self.ToolPnl()\r\n\r\n        #Panel report=======================\r\n        #self.Stpnl(sps)\r\n        #All Panel Aui=======================\r\n        self.APnls()\r\n\r\n        #set background in frame ==================\r\n        self.BGrnd(bps,BGF)\r\n\r\n\r\n        self.m_mgr.Update()\r\n        self.Centre( wx.BOTH )\r\n\r\n        #Show other win in main windows==============\r\n\r\n        DigitK = DgK.MyFrame1(self)\r\n        DigitK.SetSize((270,95))\r\n        DigitK.SetPosition((970,100))\r\n        DigitK.Show()\r\n        '''\r\n        if C == 1:\r\n            wino = wx.Frame(self,-1,style=wx.FRAME_FLOAT_ON_PARENT|wx.DEFAULT_FRAME_STYLE)\r\n            \r\n            txt = bs.Startpro()\r\n            Startp = ms.MyPanel1(wino,txt)\r\n\r\n            wino.SetSize((600,400))\r\n            wino.SetPosition((100,100))\r\n            wino.Show()\r\n        \r\n        '''\r\n        self.Clock(tps)\r\n        self.Update()\r\n\r\n    def OnMenu(self, event):\r\n        self.mid = event.GetId()\r\n        #print( self.mid )\r\n        a = pro.DoProgram(self.mid,'M')\r\n        #print dir(a)\r\n        s = a.size() if 'size' in dir(a) else ()\r\n        \r\n        win1 = wx.Frame(self, -1)\r\n        win1.SetSize(s)\r\n        a.main(win1)\r\n\r\n    def OnTool(self, event):\r\n        self.tid = event.GetId()\r\n        #print( self.tid )\r\n        a = pro.DoProgram(self.tid,'T')\r\n        # print dir(a)\r\n        s = a.size() if 'size' in dir(a) else ()\r\n\r\n        win1 = wx.Frame(self, -1)\r\n        win1.SetSize(s)\r\n        a.main(win1)\r\n\r\n    def Toolbar(self):\r\n        self.tb = self.CreateToolBar(wx.TB_HORIZONTAL | wx.NO_BORDER | wx.TB_FLAT)\r\n        Tbd = MT.ToolData()\r\n        Tbl = Tbd.ToolBarList()\r\n        #print(Tbl)\r\n        tsize = (24, 24)\r\n        self.tb.SetToolBitmapSize(tsize)\r\n        for tl in Tbl:\r\n            for t in Tbl[tl]:\r\n                if t[1] == '' or t[1] == None:\r\n                    self.tb.AddSeparator()\r\n                else:\r\n                    #print(t)\r\n\r\n                    self.tb.AddTool(t[0], t[1], wx.Bitmap(ICON32_PATH+t[2],wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, t[1], t[3], None)\r\n                    self.Bind(wx.EVT_TOOL, self.OnTool, id=t[0])\r\n            self.tb.AddSeparator()\r\n\r\n\r\n        self.tb.Realize()\r\n\r\n\r\n    def ToolPnl(self):\r\n        self.tool = []\r\n        MTBL = MT.ToolData()\r\n        MLT = MTBL.ToolBarList()\r\n        i = 0\r\n        for T in MLT:\r\n            #print(MLT[T])\r\n            MTB = MT.MyToolbar(self)\r\n            MyTL = MTB.data\r\n            #print(MyTL)\r\n            self.tool.append( MTB.CreatTool(MLT[T]) )\r\n            self.tool[i].SetToolBitmapSize(wx.Size(24, 24))\r\n            self.tool[i].Realize()\r\n            self.m_mgr.AddPane(self.tool[i], wx.aui.AuiPaneInfo().Name(\"tb\"+str(i)).Caption(\"Toolbar\").\r\n                           ToolbarPane().Top().LeftDockable(True).RightDockable(False))\r\n            self.Bind(wx.EVT_TOOL_RANGE, self.OnTool, id=self.tool[i].mytb[0].GetId(), id2=self.tool[i].mytb[-1].GetId())\r\n            i += 1\r\n\r\n    def APnls(self):\r\n        self.Pnls = []\r\n        ML = PA.MyLstPnl()\r\n        FL = ML.GetAuiPro()\r\n        for P in ML.GetAuiPnl():\r\n            #print(P)\r\n            if P != '__init__.py':\r\n                ii = importlib.import_module('GUI.AuiPanel.'+P[:-3])\r\n                mp = ii.MyPanel(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL)\r\n                self.Pnls.append(mp)\r\n\r\n                if P in FL:\r\n                    PInfo = ML.GetAuiInfo(FL[P])\r\n\r\n                    if ' Size' in FL[P]:\r\n                        #print(FL[P][5])\r\n                        PInfo.FloatingSize(int(FL[P][5].strip().split(' ')[0]),int(FL[P][5].strip().split(' ')[1]))\r\n                    if ' Layer' in FL[P]:\r\n                        #print(FL[P][7])\r\n                        PInfo.Layer(int(FL[P][7].strip()))\r\n                    self.m_mgr.AddPane(mp,PInfo)\r\n\r\n    def Clock(self,TPS):\r\n        #self.owin = wx.Frame(self,-1,style=wx.FRAME_FLOAT_ON_PARENT|wx.DEFAULT_FRAME_STYLE)\r\n        self.owin = C1.MyFrame1(self)\r\n        #clockpanel = C1.ClockPanel(self.owin)\r\n        self.owin.SetSize((250,250))\r\n        self.owin.SetPosition((150,100))\r\n        if TPS == 1:\r\n            self.owin.Show()\r\n        elif TPS == 0:\r\n            self.owin.Hide()\r\n\r\n    def BGrnd(self,BPS,BGF):\r\n        #self.bmpwin = BG.MyHtmlPanel(self,wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL , BGF)    \r\n        #self.htmlwin = BG.MyHtmlPanel(self,wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.html.HW_SCROLLBAR_AUTO )\r\n        self.bmpwin = BG.BGPanel(self,BGF)\r\n        self.m_mgr.AddPane( self.bmpwin, wx.aui.AuiPaneInfo() .Right() .Center() .CloseButton( False ).Dock().Resizable().FloatingSize( wx.Size( 800,600 )) )\r\n        #print self.bmpwin.GetSize()\r\n        if BPS == 1 :\r\n            self.m_mgr.GetPane(self.bmpwin).Show()\r\n        elif BPS == 0:\r\n            self.m_mgr.GetPane(self.bmpwin).Hide()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/window.py b/GUI/window.py
--- a/GUI/window.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/GUI/window.py	(date 1620226634571)
@@ -42,13 +42,15 @@
 
         #Menu of Program============== 
         menu = MM.MainMenu()
+
         statusBar = self.CreateStatusBar()
         imenu = menu.createMenuBar()
 
-        self.SetMenuBar(imenu)
-        h = menu.GetItemId()
-        h1 = menu.mid
-        self.Bind(wx.EVT_MENU_RANGE, self.OnMenu, id=h1, id2=h.GetId())
+        if len(imenu.GetMenus()) > 1:
+            self.SetMenuBar(imenu)
+            h = menu.GetItemId()
+            h1 = menu.mid
+            self.Bind(wx.EVT_MENU_RANGE, self.OnMenu, id=h1, id2=h.GetId())
 
         #Enable or Disable Menu==========================
         #imenu.EnableTop(3, False)
Index: GUI/Report/TB.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#In the name of GOD\r\n# -*- coding: utf-8 -*-\r\n#!usr/bin/env python\r\n\r\nimport wx\r\nfrom  Config.Init import *\r\nimport GUI.API.ToolBar1 as pnl\r\n\r\nclass telframe(wx.Frame):\r\n\tdef __init__(self,parent):\r\n\t\twx.Frame.__init__(self,parent,style=wx.FRAME_FLOAT_ON_PARENT|wx.DEFAULT_FRAME_STYLE)\r\n\t\tself.parent= parent\r\n\r\n\t\tself.Pnl = pnl.MyPanel1(self)\r\n\r\n\tdef closeit(self):\r\n\t\tself.Close(True)\r\n\r\ndef size():\r\n\treturn (-1,-1)\r\n\r\ndef main(panel=None ):\r\n\tparent =  panel.GetParent()\r\n\r\n\tframe = telframe(parent )\r\n\tframe.SetTitle(u'form')\r\n\tframe.SetSize(size())\r\n\tframe.Show()\r\n\r\nif __name__ == '__main__':\r\n\tmain()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/Report/TB.py b/GUI/Report/TB.py
--- a/GUI/Report/TB.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/GUI/Report/TB.py	(date 1619467623037)
@@ -4,7 +4,7 @@
 
 import wx
 from  Config.Init import *
-import GUI.API.ToolBar1 as pnl
+import GUI.API.PTC as pnl
 
 class telframe(wx.Frame):
 	def __init__(self,parent):
Index: Config/program.ini
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>*********\r\n#AuiPanel Parameter\r\n*********\r\nrps = 1\r\nsps = 1\r\nbps = 1\r\ntps = 1\r\n*********\r\n#Back ground file\r\n*********\r\nBGF = Mypic3.jpg
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Config/program.ini b/Config/program.ini
--- a/Config/program.ini	(revision caff947320997299581ac8399129b45394081384)
+++ b/Config/program.ini	(date 1625075267456)
@@ -1,11 +1,17 @@
-*********
-#AuiPanel Parameter
-*********
-rps = 1
-sps = 1
-bps = 1
-tps = 1
-*********
-#Back ground file
-*********
-BGF = Mypic3.jpg
\ No newline at end of file
+[General Properties]
+Date=
+Language=
+Background=
+
+[Panes Properties]
+
+
+[Form Properties]
+
+
+[Toolbar Properties]
+
+
+
+
+[Status Properties]
\ No newline at end of file
Index: GUI/Report/TB1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/Report/TB1.py b/GUI/Report/TB1.py
new file mode 100644
--- /dev/null	(date 1619467757716)
+++ b/GUI/Report/TB1.py	(date 1619467757716)
@@ -0,0 +1,31 @@
+#In the name of GOD
+# -*- coding: utf-8 -*-
+#!usr/bin/env python
+
+import wx
+from  Config.Init import *
+import GUI.API.PTC1 as pnl
+
+class telframe(wx.Frame):
+	def __init__(self,parent):
+		wx.Frame.__init__(self,parent,style=wx.FRAME_FLOAT_ON_PARENT|wx.DEFAULT_FRAME_STYLE)
+		self.parent= parent
+
+		self.Pnl = pnl.MyPanel1(self)
+
+	def closeit(self):
+		self.Close(True)
+
+def size():
+	return (-1,-1)
+
+def main(panel=None ):
+	parent =  panel.GetParent()
+
+	frame = telframe(parent )
+	frame.SetTitle(u'form')
+	frame.SetSize(size())
+	frame.Show()
+
+if __name__ == '__main__':
+	main()
Index: GUI/proman.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># In the name of God\r\n#! /usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n\r\nimport Database.MenuSet2 as MS\r\nimport importlib\r\nimport importlib.util\r\nfrom Config.Init import *\r\n\r\n\r\nclass Mymenu(object):\r\n    def __init__(self):\r\n        self.MySql = MS.GetData(u'Menu2.db', u'')\r\n        self.ToSql = MS.SetData(u'', u'',u'')\r\n\r\n    def program(self, itemid):\r\n        self.handler = self.MySql.MyProg(itemid=itemid)\r\n        return self.handler[0][1]\r\n\r\n    def toogram(self, itolid):\r\n        self.handler = self.MySql.MyTogr(itolid)\r\n        return self.handler[0][1]\r\n\r\n    def menudir(self, itemid):\r\n        self.directory = self.MySql.MnuDir(itemid)\r\n        if self.directory != [] :\r\n            return self.directory[0][0]\r\n        else:\r\n            return ''\r\n\r\n    def submndir(self, itemsub):\r\n        self.directory = self.MySql.SubDir(itemsub)\r\n        return self.directory[0][0]\r\n\r\n    def tooldir(self, itolid):\r\n        self.directory = self.MySql.TolDir(itolid)\r\n        return self.directory[0][0]\r\n\r\n    def Dohndlr(self):\r\n        return self.MySql.DoHdnl()\r\n\r\n    def Revitm(self):\r\n        return self.MySql.RevItem()\r\n\r\n\r\ndef DoProgram(item,MT):\r\n    #print( item ) # Get item from menu\r\n    M = Mymenu()\r\n\r\n    if MT == 'M':\r\n        p = M.program(item)\r\n        if M.menudir(item) != '':\r\n            d = M.menudir(item)\r\n        else:\r\n            if M.submndir(item) == '100':\r\n                d = 'GUI.Temp'\r\n            else:\r\n                d = M.menudir(int(M.submndir(item)[0][0]))\r\n\r\n    elif MT == 'T':\r\n        p = M.toogram(item)\r\n        d = M.tooldir(item)\r\n\r\n    elif MT == 'A':\r\n        p = M.program(item)\r\n        d = 'GUI.Main'\r\n\r\n    I = M.Dohndlr()\r\n    #print I\r\n    Ii = []\r\n    for it in I:\r\n        Ii.append(it[0])\r\n    #print(Ii)\r\n    a = d+'.'+p\r\n    #i = __import__(a,globals(),locals(),Ii,0)\r\n\r\n    i = importlib.import_module(a)\r\n    #print dir(i)\r\n    #i.main()\r\n\r\n    return i\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/proman.py b/GUI/proman.py
--- a/GUI/proman.py	(revision caff947320997299581ac8399129b45394081384)
+++ b/GUI/proman.py	(date 1619462873968)
@@ -64,6 +64,9 @@
     elif MT == 'A':
         p = M.program(item)
         d = 'GUI.Main'
+    else:
+        d = ''
+        p = ''
 
     I = M.Dohndlr()
     #print I
@@ -73,8 +76,11 @@
     #print(Ii)
     a = d+'.'+p
     #i = __import__(a,globals(),locals(),Ii,0)
-
-    i = importlib.import_module(a)
+    try:
+        i = importlib.import_module(a)
+    except ImportError as error:
+        print(error)
+        i = -1
     #print dir(i)
     #i.main()
 
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
--- /dev/null	(date 1626512879178)
+++ b/requirements.txt	(date 1626512879178)
@@ -0,0 +1,3 @@
+convertdate=2.3.2
+wxpython=4.1.1
+
